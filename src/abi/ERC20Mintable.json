{
  "contractName": "ERC20Mintable",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "sender",
          "type": "address"
        },
        {
          "name": "recipient",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "recipient",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "canMint",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "stopMinting",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.5+commit.47a71e8f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that adds a set of accounts with the {MinterRole}, which have permission to mint (create) new tokens as they see fit. * At construction, the deployer of the contract is the only minter.\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address.\"},\"mint(address,uint256)\":{\"details\":\"See {ERC20-_mint}.     * Requirements:     * - the caller must have the {MinterRole}.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}.     * Requirements:     * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}.     * Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20};     * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for `sender`'s tokens of at least `amount`.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/projects/beefledger/investor-engine/contracts/ERC20/ERC20Mintable.sol\":\"ERC20Mintable\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/projects/beefledger/investor-engine/contracts/ERC20/ERC20.sol\":{\"keccak256\":\"0x834f606b5b7ff70fab43c953788f0569628a6526aac502648ad41a4f735ff674\",\"urls\":[\"bzzr://98b303e763ff564c161446fb7118ec1cdd05bfe6b7a9c933b1fc65b769a5f0dd\"]},\"/projects/beefledger/investor-engine/contracts/ERC20/ERC20Mintable.sol\":{\"keccak256\":\"0xac33f10ef05fe257382a983ec42648dc08f70c7debf7316894854a47bf8af9f9\",\"urls\":[\"bzzr://f45c3e6147c8c4fb5b01677e794a905fd1d2728d928112a12ef8d4e96158fc0d\"]},\"/projects/beefledger/investor-engine/contracts/ERC20/IERC20.sol\":{\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\",\"urls\":[\"bzzr://cf2d583b8dce38d0617fdcd65f2fd9f126fe17b7f683b5a515ea9d2762d8b062\"]},\"/projects/beefledger/investor-engine/contracts/GSN/Context.sol\":{\"keccak256\":\"0x9061d72fa4af111684138fb9f8d7071548c9fdbaafe8bcbc8daa70ac969dab5b\",\"urls\":[\"bzzr://1029880057f7d91412ed329bcfa1b0995fa4a7dc88629d439bfb906fd773b3fa\"]},\"/projects/beefledger/investor-engine/contracts/access/Roles.sol\":{\"keccak256\":\"0xb002c378d7b82a101bd659c341518953ca0919d342c0a400196982c0e7e7bcdb\",\"urls\":[\"bzzr://bd34c1ce05b5b2b3a62fc02e160f6805b1cadd476854664f433c685b2fda8dad\"]},\"/projects/beefledger/investor-engine/contracts/access/roles/MinterRole.sol\":{\"keccak256\":\"0xbe8eef6f2cb4e427f5c5d8a76865ccd06e55a4f1d6671ba312d45bfa705aedbf\",\"urls\":[\"bzzr://946a26eebf5d294534471d07c4dc449ce3123e9fc2994bdfcd99dff1d09cc1af\"]},\"/projects/beefledger/investor-engine/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x559e1c41502e437b665893c320b2d70f1311492799916fabcb55f7b18100c0a2\",\"urls\":[\"bzzr://a0962f45f5f53e94c34f10d5b686489d271f8b4a5ad970fd8710edb04a963174\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063983b2d561161008c578063a9059cbb11610066578063a9059cbb14610261578063aa271e1a1461028d578063beb9716d146102b3578063dd62ed3e146102bb576100ea565b8063983b2d5614610207578063986502751461022d578063a457c2d714610235576100ea565b806339509351116100c8578063395093511461017f5780633e3e0b12146101ab57806340c10f19146101b557806370a08231146101e1576100ea565b8063095ea7b3146100ef57806318160ddd1461012f57806323b872dd14610149575b600080fd5b61011b6004803603604081101561010557600080fd5b506001600160a01b0381351690602001356102e9565b604080519115158252519081900360200190f35b610137610306565b60408051918252519081900360200190f35b61011b6004803603606081101561015f57600080fd5b506001600160a01b0381358116916020810135909116906040013561030c565b61011b6004803603604081101561019557600080fd5b506001600160a01b038135169060200135610399565b6101b36103ed565b005b61011b600480360360408110156101cb57600080fd5b506001600160a01b038135169060200135610449565b610137600480360360208110156101f757600080fd5b50356001600160a01b03166104fc565b6101b36004803603602081101561021d57600080fd5b50356001600160a01b0316610517565b6101b361056e565b61011b6004803603604081101561024b57600080fd5b506001600160a01b038135169060200135610580565b61011b6004803603604081101561027757600080fd5b506001600160a01b0381351690602001356105ee565b61011b600480360360208110156102a357600080fd5b50356001600160a01b0316610602565b61011b61061b565b610137600480360360408110156102d157600080fd5b506001600160a01b0381358116916020013516610624565b60006102fd6102f661064f565b8484610653565b50600192915050565b60025490565b6000610319848484610749565b61038f8461032561064f565b61038a85604051806060016040528060278152602001610c8f602791396001600160a01b038a1660009081526001602052604081209061036361064f565b6001600160a01b03168152602081019190915260400160002054919063ffffffff6108af16565b610653565b5060019392505050565b60006102fd6103a661064f565b8461038a85600160006103b761064f565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff61094916565b6103fd6103f861064f565b610602565b151561043d57604051600160e51b62461bcd028152600401808060200182810382526030815260200180610d1c6030913960400191505060405180910390fd5b6004805460ff19169055565b60006104566103f861064f565b151561049657604051600160e51b62461bcd028152600401808060200182810382526030815260200180610d1c6030913960400191505060405180910390fd5b60045460ff1615156104f25760408051600160e51b62461bcd02815260206004820152601260248201527f43616e6e6f74206d696e7420746f6b656e730000000000000000000000000000604482015290519081900360640190fd5b6102fd83836109ad565b6001600160a01b031660009081526020819052604090205490565b6105226103f861064f565b151561056257604051600160e51b62461bcd028152600401808060200182810382526030815260200180610d1c6030913960400191505060405180910390fd5b61056b81610aa2565b50565b61057e61057961064f565b610aea565b565b60006102fd61058d61064f565b8461038a85604051806060016040528060248152602001610db360249139600160006105b761064f565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff6108af16565b60006102fd6105fb61064f565b8484610749565b600061061560038363ffffffff610b3216565b92915050565b60045460ff1681565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b038316151561069d57604051600160e51b62461bcd028152600401808060200182810382526023815260200180610cd86023913960400191505060405180910390fd5b6001600160a01b03821615156106e757604051600160e51b62461bcd028152600401808060200182810382526021815260200180610cfb6021913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316151561079357604051600160e51b62461bcd028152600401808060200182810382526024815260200180610d8f6024913960400191505060405180910390fd5b6001600160a01b03821615156107dd57604051600160e51b62461bcd028152600401808060200182810382526022815260200180610cb66022913960400191505060405180910390fd5b61082081604051806060016040528060258152602001610dd7602591396001600160a01b038616600090815260208190526040902054919063ffffffff6108af16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610855908263ffffffff61094916565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561094157604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109065781810151838201526020016108ee565b50505050905090810190601f1680156109335780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156109a65760408051600160e51b62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b0382161515610a0d5760408051600160e51b62461bcd02815260206004820152601e60248201527f4552433230206d696e7420746f20746865207a65726f20616464726573730000604482015290519081900360640190fd5b600254610a20908263ffffffff61094916565b6002556001600160a01b038216600090815260208190526040902054610a4c908263ffffffff61094916565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b610ab360038263ffffffff610b9e16565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b610afb60038263ffffffff610c2216565b6040516001600160a01b038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b60006001600160a01b0382161515610b7e57604051600160e51b62461bcd028152600401808060200182810382526022815260200180610d6d6022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b610ba88282610b32565b15610bfd5760408051600160e51b62461bcd02815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b610c2c8282610b32565b1515610c6c57604051600160e51b62461bcd028152600401808060200182810382526021815260200180610d4c6021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff1916905556fe4552433230207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654552433230207472616e7366657220746f20746865207a65726f2061646472657373455243323020617070726f76652066726f6d20746865207a65726f2061646472657373455243323020617070726f766520746f20746865207a65726f20616464726573734d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766520746865204d696e74657220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c65526f6c65733a206163636f756e7420697320746865207a65726f20616464726573734552433230207472616e736665722066726f6d20746865207a65726f206164647265737345524332302064656372656173656420616c6c6f77616e63652062656c6f77207a65726f4552433230207472616e7366657220616d6f756e7420657863656564732062616c616e6365a165627a7a723058206e62f5064634454a1bca5db9593122ee456264dfd8def68308f088e7d65cdf860029",
  "sourceMap": "319:483:6:-;;;370:26;;;-1:-1:-1;;370:26:6;392:4;370:26;;;318:24:28;329:12;:10;;;;;:12;;:::i;:::-;318:10;;;:24;;:::i;:::-;319:483:6;;793:96:24;872:10;793:96;:::o;786:119:28:-;842:21;855:7;842:8;:12;;;;;;:21;;;;:::i;:::-;878:20;;-1:-1:-1;;;;;878:20:28;;;;;;;;786:119;:::o;260:175:26:-;337:18;341:4;347:7;337:3;;;:18;;:::i;:::-;336:19;328:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;401:20:26;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;401:27:26;424:4;401:27;;;260:175::o;779:200::-;851:4;-1:-1:-1;;;;;875:21:26;;;;867:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;952:20:26;:11;:20;;;;;;;;;;;;;;;779:200::o;319:483:6:-;;;;;;;",
  "deployedSourceMap": "319:483:6:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;319:483:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2494:149:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2494:149:2;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;1553:89;;;:::i;:::-;;;;;;;;;;;;;;;;3101:299;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3101:299:2;;;;;;;;;;;;;;;;;:::i;3795:207::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3795:207:2;;;;;;;;:::i;727:73:6:-;;;:::i;:::-;;533:188;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;533:188:6;;;;;;;;:::i;1700:108:2:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1700:108:2;-1:-1:-1;;;;;1700:108:2;;:::i;607:90:28:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;607:90:28;-1:-1:-1;;;;;607:90:28;;:::i;703:77::-;;;:::i;4489:257:2:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4489:257:2;;;;;;;;:::i;2011:155::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2011:155:2;;;;;;;;:::i;494:107:28:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;494:107:28;-1:-1:-1;;;;;494:107:28;;:::i;370:26:6:-;;;:::i;2224:132:2:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2224:132:2;;;;;;;;;;:::i;2494:149::-;2560:4;2576:39;2585:12;:10;:12::i;:::-;2599:7;2608:6;2576:8;:39::i;:::-;-1:-1:-1;2632:4:2;2494:149;;;;:::o;1553:89::-;1623:12;;1553:89;:::o;3101:299::-;3190:4;3206:36;3216:6;3224:9;3235:6;3206:9;:36::i;:::-;3252:120;3261:6;3269:12;:10;:12::i;:::-;3283:88;3321:6;3283:88;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3283:19:2;;;;;;:11;:19;;;;;;3303:12;:10;:12::i;:::-;-1:-1:-1;;;;;3283:33:2;;;;;;;;;;;;-1:-1:-1;3283:33:2;;;:88;;:37;:88;:::i;:::-;3252:8;:120::i;:::-;-1:-1:-1;3389:4:2;3101:299;;;;;:::o;3795:207::-;3875:4;3891:83;3900:12;:10;:12::i;:::-;3914:7;3923:50;3962:10;3923:11;:25;3935:12;:10;:12::i;:::-;-1:-1:-1;;;;;3923:25:2;;;;;;;;;;;;;;;;;-1:-1:-1;3923:25:2;;;:34;;;;;;;;;;;:50;:38;:50;:::i;727:73:6:-;395:22:28;404:12;:10;:12::i;:::-;395:8;:22::i;:::-;387:83;;;;;;-1:-1:-1;;;;;387:83:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;778:7:6;:15;;-1:-1:-1;;778:15:6;;;727:73::o;533:188::-;607:4;395:22:28;404:12;:10;:12::i;395:22::-;387:83;;;;;;-1:-1:-1;;;;;387:83:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;631:7:6;;;;623:38;;;;;;;-1:-1:-1;;;;;623:38:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;671:22;677:7;686:6;671:5;:22::i;1700:108:2:-;-1:-1:-1;;;;;1783:18:2;1757:7;1783:18;;;;;;;;;;;;1700:108::o;607:90:28:-;395:22;404:12;:10;:12::i;395:22::-;387:83;;;;;;-1:-1:-1;;;;;387:83:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;671:19;682:7;671:10;:19::i;:::-;607:90;:::o;703:77::-;746:27;760:12;:10;:12::i;:::-;746:13;:27::i;:::-;703:77::o;4489:257:2:-;4574:4;4590:128;4599:12;:10;:12::i;:::-;4613:7;4622:95;4661:15;4622:95;;;;;;;;;;;;;;;;;:11;:25;4634:12;:10;:12::i;:::-;-1:-1:-1;;;;;4622:25:2;;;;;;;;;;;;;;;;;-1:-1:-1;4622:25:2;;;:34;;;;;;;;;;;:95;;:38;:95;:::i;2011:155::-;2080:4;2096:42;2106:12;:10;:12::i;:::-;2120:9;2131:6;2096:9;:42::i;494:107:28:-;550:4;573:21;:8;586:7;573:21;:12;:21;:::i;:::-;566:28;494:107;-1:-1:-1;;494:107:28:o;370:26:6:-;;;;;;:::o;2224:132:2:-;-1:-1:-1;;;;;2322:18:2;;;2296:7;2322:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;2224:132::o;793:96:24:-;872:10;793:96;:::o;7336:330:2:-;-1:-1:-1;;;;;7429:19:2;;;;7421:67;;;;-1:-1:-1;;;;;7421:67:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7506:21:2;;;;7498:67;;;;-1:-1:-1;;;;;7498:67:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7576:18:2;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;7627:32;;;;;;;;;;;;;;;;;7336:330;;;:::o;5220:461::-;-1:-1:-1;;;;;5317:20:2;;;;5309:69;;;;-1:-1:-1;;;;;5309:69:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5396:23:2;;;;5388:70;;;;-1:-1:-1;;;;;5388:70:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5489;5511:6;5489:70;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5489:17:2;;:9;:17;;;;;;;;;;;;:70;;:21;:70;:::i;:::-;-1:-1:-1;;;;;5469:17:2;;;:9;:17;;;;;;;;;;;:90;;;;5592:20;;;;;;;:32;;5617:6;5592:32;:24;:32;:::i;:::-;-1:-1:-1;;;;;5569:20:2;;;:9;:20;;;;;;;;;;;;:55;;;;5639:35;;;;;;;5569:20;;5639:35;;;;;;;;;;;;;5220:461;;;:::o;1844:187:37:-;1930:7;1965:12;1957:6;;;;1949:29;;;;-1:-1:-1;;;;;1949:29:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1949:29:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2000:5:37;;;1844:187::o;834:176::-;892:7;923:5;;;946:6;;;;938:46;;;;;-1:-1:-1;;;;;938:46:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;834:176;-1:-1:-1;;;834:176:37:o;5951:301:2:-;-1:-1:-1;;;;;6026:21:2;;;;6018:64;;;;;-1:-1:-1;;;;;6018:64:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;6108:12;;:24;;6125:6;6108:24;:16;:24;:::i;:::-;6093:12;:39;-1:-1:-1;;;;;6163:18:2;;:9;:18;;;;;;;;;;;:30;;6186:6;6163:30;:22;:30;:::i;:::-;-1:-1:-1;;;;;6142:18:2;;:9;:18;;;;;;;;;;;:51;;;;6208:37;;;;;;;6142:18;;:9;;6208:37;;;;;;;;;;5951:301;;:::o;786:119:28:-;842:21;:8;855:7;842:21;:12;:21;:::i;:::-;878:20;;-1:-1:-1;;;;;878:20:28;;;;;;;;786:119;:::o;911:127::-;970:24;:8;986:7;970:24;:15;:24;:::i;:::-;1009:22;;-1:-1:-1;;;;;1009:22:28;;;;;;;;911:127;:::o;779:200:26:-;851:4;-1:-1:-1;;;;;875:21:26;;;;867:68;;;;-1:-1:-1;;;;;867:68:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;952:20:26;:11;:20;;;;;;;;;;;;;;;779:200::o;260:175::-;337:18;341:4;347:7;337:3;:18::i;:::-;336:19;328:63;;;;;-1:-1:-1;;;;;328:63:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;401:20:26;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;401:27:26;424:4;401:27;;;260:175::o;510:180::-;589:18;593:4;599:7;589:3;:18::i;:::-;581:64;;;;;;-1:-1:-1;;;;;581:64:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;655:20:26;678:5;655:20;;;;;;;;;;;:28;;-1:-1:-1;;655:28:26;;;510:180::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./ERC20.sol\";\nimport \"../access/roles/MinterRole.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\n * which have permission to mint (create) new tokens as they see fit.\n *\n * At construction, the deployer of the contract is the only minter.\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n\n    bool public canMint = true;\n\n    /**\n     * @dev See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the {MinterRole}.\n     */\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\n        require(canMint, \"Cannot mint tokens\");\n        _mint(account, amount);\n        return true;\n    }\n\n    function stopMinting() public onlyMinter {\n        canMint = false;\n    }\n}\n",
  "sourcePath": "/projects/beefledger/investor-engine/contracts/ERC20/ERC20Mintable.sol",
  "ast": {
    "absolutePath": "/projects/beefledger/investor-engine/contracts/ERC20/ERC20Mintable.sol",
    "exportedSymbols": {
      "ERC20Mintable": [
        1289
      ]
    },
    "id": 1290,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1245,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:6"
      },
      {
        "absolutePath": "/projects/beefledger/investor-engine/contracts/ERC20/ERC20.sol",
        "file": "./ERC20.sol",
        "id": 1246,
        "nodeType": "ImportDirective",
        "scope": 1290,
        "sourceUnit": 1097,
        "src": "25:21:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/projects/beefledger/investor-engine/contracts/access/roles/MinterRole.sol",
        "file": "../access/roles/MinterRole.sol",
        "id": 1247,
        "nodeType": "ImportDirective",
        "scope": 1290,
        "sourceUnit": 3379,
        "src": "47:40:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1248,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1096,
              "src": "345:5:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$1096",
                "typeString": "contract ERC20"
              }
            },
            "id": 1249,
            "nodeType": "InheritanceSpecifier",
            "src": "345:5:6"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1250,
              "name": "MinterRole",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3378,
              "src": "352:10:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MinterRole_$3378",
                "typeString": "contract MinterRole"
              }
            },
            "id": 1251,
            "nodeType": "InheritanceSpecifier",
            "src": "352:10:6"
          }
        ],
        "contractDependencies": [
          1096,
          1460,
          3046,
          3378
        ],
        "contractKind": "contract",
        "documentation": "@dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\nwhich have permission to mint (create) new tokens as they see fit.\n * At construction, the deployer of the contract is the only minter.",
        "fullyImplemented": true,
        "id": 1289,
        "linearizedBaseContracts": [
          1289,
          3378,
          1096,
          1460,
          3046
        ],
        "name": "ERC20Mintable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 1254,
            "name": "canMint",
            "nodeType": "VariableDeclaration",
            "scope": 1289,
            "src": "370:26:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1252,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "370:4:6",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "74727565",
              "id": 1253,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "392:4:6",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "true"
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 1277,
              "nodeType": "Block",
              "src": "613:108:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1266,
                        "name": "canMint",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1254,
                        "src": "631:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "43616e6e6f74206d696e7420746f6b656e73",
                        "id": 1267,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "640:20:6",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6a59e40192db4717e94c5d40aaf00d9e24b0e93ab0c573ae13291a80638ce2b5",
                          "typeString": "literal_string \"Cannot mint tokens\""
                        },
                        "value": "Cannot mint tokens"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6a59e40192db4717e94c5d40aaf00d9e24b0e93ab0c573ae13291a80638ce2b5",
                          "typeString": "literal_string \"Cannot mint tokens\""
                        }
                      ],
                      "id": 1265,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5437,
                        5438
                      ],
                      "referencedDeclaration": 5438,
                      "src": "623:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1268,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "623:38:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1269,
                  "nodeType": "ExpressionStatement",
                  "src": "623:38:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1271,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1256,
                        "src": "677:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1272,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1258,
                        "src": "686:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1270,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 980,
                      "src": "671:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1273,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "671:22:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1274,
                  "nodeType": "ExpressionStatement",
                  "src": "671:22:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 1275,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "710:4:6",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 1264,
                  "id": 1276,
                  "nodeType": "Return",
                  "src": "703:11:6"
                }
              ]
            },
            "documentation": "@dev See {ERC20-_mint}.\n     * Requirements:\n     * - the caller must have the {MinterRole}.",
            "id": 1278,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 1261,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1260,
                  "name": "onlyMinter",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3311,
                  "src": "587:10:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "587:10:6"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1259,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1256,
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 1278,
                  "src": "547:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1255,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "547:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1258,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1278,
                  "src": "564:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1257,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "564:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "546:33:6"
            },
            "returnParameters": {
              "id": 1264,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1263,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1278,
                  "src": "607:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1262,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "607:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "606:6:6"
            },
            "scope": 1289,
            "src": "533:188:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1287,
              "nodeType": "Block",
              "src": "768:32:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1285,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1283,
                      "name": "canMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1254,
                      "src": "778:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "66616c7365",
                      "id": 1284,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "788:5:6",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "778:15:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1286,
                  "nodeType": "ExpressionStatement",
                  "src": "778:15:6"
                }
              ]
            },
            "documentation": null,
            "id": 1288,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 1281,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1280,
                  "name": "onlyMinter",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3311,
                  "src": "757:10:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "757:10:6"
              }
            ],
            "name": "stopMinting",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1279,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "747:2:6"
            },
            "returnParameters": {
              "id": 1282,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "768:0:6"
            },
            "scope": 1289,
            "src": "727:73:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1290,
        "src": "319:483:6"
      }
    ],
    "src": "0:803:6"
  },
  "legacyAST": {
    "absolutePath": "/projects/beefledger/investor-engine/contracts/ERC20/ERC20Mintable.sol",
    "exportedSymbols": {
      "ERC20Mintable": [
        1289
      ]
    },
    "id": 1290,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1245,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:6"
      },
      {
        "absolutePath": "/projects/beefledger/investor-engine/contracts/ERC20/ERC20.sol",
        "file": "./ERC20.sol",
        "id": 1246,
        "nodeType": "ImportDirective",
        "scope": 1290,
        "sourceUnit": 1097,
        "src": "25:21:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/projects/beefledger/investor-engine/contracts/access/roles/MinterRole.sol",
        "file": "../access/roles/MinterRole.sol",
        "id": 1247,
        "nodeType": "ImportDirective",
        "scope": 1290,
        "sourceUnit": 3379,
        "src": "47:40:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1248,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1096,
              "src": "345:5:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$1096",
                "typeString": "contract ERC20"
              }
            },
            "id": 1249,
            "nodeType": "InheritanceSpecifier",
            "src": "345:5:6"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1250,
              "name": "MinterRole",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3378,
              "src": "352:10:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MinterRole_$3378",
                "typeString": "contract MinterRole"
              }
            },
            "id": 1251,
            "nodeType": "InheritanceSpecifier",
            "src": "352:10:6"
          }
        ],
        "contractDependencies": [
          1096,
          1460,
          3046,
          3378
        ],
        "contractKind": "contract",
        "documentation": "@dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\nwhich have permission to mint (create) new tokens as they see fit.\n * At construction, the deployer of the contract is the only minter.",
        "fullyImplemented": true,
        "id": 1289,
        "linearizedBaseContracts": [
          1289,
          3378,
          1096,
          1460,
          3046
        ],
        "name": "ERC20Mintable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 1254,
            "name": "canMint",
            "nodeType": "VariableDeclaration",
            "scope": 1289,
            "src": "370:26:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1252,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "370:4:6",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "74727565",
              "id": 1253,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "392:4:6",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "true"
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 1277,
              "nodeType": "Block",
              "src": "613:108:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1266,
                        "name": "canMint",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1254,
                        "src": "631:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "43616e6e6f74206d696e7420746f6b656e73",
                        "id": 1267,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "640:20:6",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6a59e40192db4717e94c5d40aaf00d9e24b0e93ab0c573ae13291a80638ce2b5",
                          "typeString": "literal_string \"Cannot mint tokens\""
                        },
                        "value": "Cannot mint tokens"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6a59e40192db4717e94c5d40aaf00d9e24b0e93ab0c573ae13291a80638ce2b5",
                          "typeString": "literal_string \"Cannot mint tokens\""
                        }
                      ],
                      "id": 1265,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5437,
                        5438
                      ],
                      "referencedDeclaration": 5438,
                      "src": "623:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1268,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "623:38:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1269,
                  "nodeType": "ExpressionStatement",
                  "src": "623:38:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1271,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1256,
                        "src": "677:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1272,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1258,
                        "src": "686:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1270,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 980,
                      "src": "671:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1273,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "671:22:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1274,
                  "nodeType": "ExpressionStatement",
                  "src": "671:22:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 1275,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "710:4:6",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 1264,
                  "id": 1276,
                  "nodeType": "Return",
                  "src": "703:11:6"
                }
              ]
            },
            "documentation": "@dev See {ERC20-_mint}.\n     * Requirements:\n     * - the caller must have the {MinterRole}.",
            "id": 1278,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 1261,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1260,
                  "name": "onlyMinter",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3311,
                  "src": "587:10:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "587:10:6"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1259,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1256,
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 1278,
                  "src": "547:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1255,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "547:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1258,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1278,
                  "src": "564:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1257,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "564:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "546:33:6"
            },
            "returnParameters": {
              "id": 1264,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1263,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1278,
                  "src": "607:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1262,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "607:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "606:6:6"
            },
            "scope": 1289,
            "src": "533:188:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1287,
              "nodeType": "Block",
              "src": "768:32:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1285,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1283,
                      "name": "canMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1254,
                      "src": "778:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "66616c7365",
                      "id": 1284,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "788:5:6",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "778:15:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1286,
                  "nodeType": "ExpressionStatement",
                  "src": "778:15:6"
                }
              ]
            },
            "documentation": null,
            "id": 1288,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 1281,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1280,
                  "name": "onlyMinter",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3311,
                  "src": "757:10:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "757:10:6"
              }
            ],
            "name": "stopMinting",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1279,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "747:2:6"
            },
            "returnParameters": {
              "id": 1282,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "768:0:6"
            },
            "scope": 1289,
            "src": "727:73:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1290,
        "src": "319:483:6"
      }
    ],
    "src": "0:803:6"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.5+commit.47a71e8f.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.3",
  "updatedAt": "2020-07-31T06:30:01.963Z",
  "devdoc": {
    "details": "Extension of {ERC20} that adds a set of accounts with the {MinterRole}, which have permission to mint (create) new tokens as they see fit. * At construction, the deployer of the contract is the only minter.",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address."
      },
      "mint(address,uint256)": {
        "details": "See {ERC20-_mint}.     * Requirements:     * - the caller must have the {MinterRole}."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}.     * Requirements:     * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}.     * Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20};     * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for `sender`'s tokens of at least `amount`."
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}