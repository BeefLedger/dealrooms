{
  "contractName": "ERC721Burnable",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.5+commit.47a71e8f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC721 Token that can be irreversibly burned (destroyed).\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"address to query the balance of\"},\"return\":\"uint256 representing the amount owned by the passed address\"},\"burn(uint256)\":{\"details\":\"Burns a specific ERC721 token.\",\"params\":{\"tokenId\":\"uint256 id of the ERC721 token to be burned.\"}},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"return\":\"address currently approved for the given token ID\"},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner.\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"return\":\"bool whether the given operator is approved by the given owner\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"return\":\"address currently marked as the owner of the given token ID\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"to\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}}},\"title\":\"ERC721 Burnable Token\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/projects/beefledger/investor-engine/contracts/ERC721/ERC721Burnable.sol\":\"ERC721Burnable\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/projects/beefledger/investor-engine/contracts/ERC721/ERC721.sol\":{\"keccak256\":\"0x33090ad3605c26d31dce7712b4e8d1a93816637c8568d93f351b2ce84ab074eb\",\"urls\":[\"bzzr://88e6b43f4d2f4848996f605bb8d103a235d42c355f66fa0ff65aea9ce57eea9a\"]},\"/projects/beefledger/investor-engine/contracts/ERC721/ERC721Burnable.sol\":{\"keccak256\":\"0x39f8b176909dd635f3682709a685f72e19617ab4218fc1c980e9d656636460bb\",\"urls\":[\"bzzr://449036f744c94277d93e33eba3cbe4a7d0cc853df0cb204fa5d34f29b604912c\"]},\"/projects/beefledger/investor-engine/contracts/ERC721/IERC721.sol\":{\"keccak256\":\"0x91be07c14b2ff08025075f36c4ad51cb5dc5ae94c2d817bcc1a8a45d474e6155\",\"urls\":[\"bzzr://90c52a834797133909bb4f4fc707d57cb38d8b0df4f9d6934ae59ce3cdf2ad39\"]},\"/projects/beefledger/investor-engine/contracts/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x042048c375daca04b31e31c91bbae912b84b5eb818c4e31b2deb530fd2305342\",\"urls\":[\"bzzr://2f8b9c142d30b43eab7b77dbcc632a51987eeb62371777d765e9311c0b3c4c13\"]},\"/projects/beefledger/investor-engine/contracts/GSN/Context.sol\":{\"keccak256\":\"0x9061d72fa4af111684138fb9f8d7071548c9fdbaafe8bcbc8daa70ac969dab5b\",\"urls\":[\"bzzr://1029880057f7d91412ed329bcfa1b0995fa4a7dc88629d439bfb906fd773b3fa\"]},\"/projects/beefledger/investor-engine/contracts/drafts/Counters.sol\":{\"keccak256\":\"0x5be8533c5950173dc2b77b75108fae6e6c5449aedadde3385ba457394aad2384\",\"urls\":[\"bzzr://8ab3b1e3d023aafb8a2d127de323b74567084e821b955b5f543e67fe964b1a6b\"]},\"/projects/beefledger/investor-engine/contracts/introspection/ERC165.sol\":{\"keccak256\":\"0x01aedbf24e121a744262e04c7815b2a4c8ce604dee4829c5cff00943a594ccf3\",\"urls\":[\"bzzr://07dffd4225b87bb0aa8d02cfdb04640c2e02e59b35143accd0dd757775449c61\"]},\"/projects/beefledger/investor-engine/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xe0ed10f53955c35eecb02724538650a155aa940be3f0a54cd3bde6c6b0c6e48c\",\"urls\":[\"bzzr://14f0ef90a240b2aca847fe1489b10965e04ba16cf221f52ed6470d0cad291f9d\"]},\"/projects/beefledger/investor-engine/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x559e1c41502e437b665893c320b2d70f1311492799916fabcb55f7b18100c0a2\",\"urls\":[\"bzzr://a0962f45f5f53e94c34f10d5b686489d271f8b4a5ad970fd8710edb04a963174\"]},\"/projects/beefledger/investor-engine/contracts/utils/Address.sol\":{\"keccak256\":\"0x24e5e69e549c7d468a7fa3c0ca1530656f7a960da9af5927bcc0e3261bf07bad\",\"urls\":[\"bzzr://51d7c70f2b471b74be5256f8d277401b361e79aaab3dd52d63ba63a52d20925f\"]}},\"version\":1}",
  "bytecode": "0x608060405261001a6301ffc9a760e01b61003560201b60201c565b6100306380ac58cd60e01b61003560201b60201c565b610103565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156100c657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b611095806101126000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806342966c681161007157806342966c68146101bc5780636352211e146101d957806370a08231146101f6578063a22cb4651461022e578063b88d4fde1461025c578063e985e9c514610322576100a9565b806301ffc9a7146100ae578063081812fc146100e9578063095ea7b31461012257806323b872dd1461015057806342842e0e14610186575b600080fd5b6100d5600480360360208110156100c457600080fd5b50356001600160e01b031916610350565b604080519115158252519081900360200190f35b610106600480360360208110156100ff57600080fd5b503561036f565b604080516001600160a01b039092168252519081900360200190f35b61014e6004803603604081101561013857600080fd5b506001600160a01b0381351690602001356103d6565b005b61014e6004803603606081101561016657600080fd5b506001600160a01b03813581169160208101359091169060400135610500565b61014e6004803603606081101561019c57600080fd5b506001600160a01b03813581169160208101359091169060400135610561565b61014e600480360360208110156101d257600080fd5b503561057c565b610106600480360360208110156101ef57600080fd5b50356105d3565b61021c6004803603602081101561020c57600080fd5b50356001600160a01b0316610632565b60408051918252519081900360200190f35b61014e6004803603604081101561024457600080fd5b506001600160a01b038135169060200135151561069f565b61014e6004803603608081101561027257600080fd5b6001600160a01b038235811692602081013590911691604082013591908101906080810160608201356401000000008111156102ad57600080fd5b8201836020820111156102bf57600080fd5b803590602001918460018302840111640100000000831117156102e157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506107a1945050505050565b6100d56004803603604081101561033857600080fd5b506001600160a01b0381358116916020013516610804565b6001600160e01b03191660009081526020819052604090205460ff1690565b600061037a82610832565b15156103ba57604051600160e51b62461bcd02815260040180806020018281038252602c815260200180610f6e602c913960400191505060405180910390fd5b506000908152600260205260409020546001600160a01b031690565b60006103e1826105d3565b90506001600160a01b03838116908216141561043157604051600160e51b62461bcd028152600401808060200182810382526021815260200180610fc36021913960400191505060405180910390fd5b806001600160a01b031661044361084f565b6001600160a01b0316148061046457506104648161045f61084f565b610804565b15156104a457604051600160e51b62461bcd028152600401808060200182810382526038815260200180610ee36038913960400191505060405180910390fd5b60008281526002602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61051161050b61084f565b82610853565b151561055157604051600160e51b62461bcd028152600401808060200182810382526031815260200180610fe46031913960400191505060405180910390fd5b61055c8383836108fc565b505050565b61055c838383604051806020016040528060008152506107a1565b61058761050b61084f565b15156105c757604051600160e51b62461bcd02815260040180806020018281038252603081526020018061103a6030913960400191505060405180910390fd5b6105d081610a48565b50565b6000818152600160205260408120546001600160a01b031680151561062c57604051600160e51b62461bcd028152600401808060200182810382526029815260200180610f456029913960400191505060405180910390fd5b92915050565b60006001600160a01b038216151561067e57604051600160e51b62461bcd02815260040180806020018281038252602a815260200180610f1b602a913960400191505060405180910390fd5b6001600160a01b038216600090815260036020526040902061062c90610a5a565b6106a761084f565b6001600160a01b038381169116141561070a5760408051600160e51b62461bcd02815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b806004600061071761084f565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff19169215159290921790915561075b61084f565b60408051841515815290516001600160a01b0392909216917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b6107b26107ac61084f565b83610853565b15156107f257604051600160e51b62461bcd028152600401808060200182810382526031815260200180610fe46031913960400191505060405180910390fd5b6107fe84848484610a5e565b50505050565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b6000908152600160205260409020546001600160a01b0316151590565b3390565b600061085e82610832565b151561089e57604051600160e51b62461bcd02815260040180806020018281038252602c815260200180610eb7602c913960400191505060405180910390fd5b60006108a9836105d3565b9050806001600160a01b0316846001600160a01b031614806108e45750836001600160a01b03166108d98461036f565b6001600160a01b0316145b806108f457506108f48185610804565b949350505050565b826001600160a01b031661090f826105d3565b6001600160a01b03161461095757604051600160e51b62461bcd028152600401808060200182810382526029815260200180610f9a6029913960400191505060405180910390fd5b6001600160a01b03821615156109a157604051600160e51b62461bcd028152600401808060200182810382526024815260200180610e936024913960400191505060405180910390fd5b6109aa81610ab5565b6001600160a01b03831660009081526003602052604090206109cb90610af0565b6001600160a01b03821660009081526003602052604090206109ec90610b07565b60008181526001602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6105d0610a54826105d3565b82610b10565b5490565b610a698484846108fc565b610a7584848484610bea565b15156107fe57604051600160e51b62461bcd028152600401808060200182810382526032815260200180610e616032913960400191505060405180910390fd5b6000818152600260205260409020546001600160a01b0316156105d057600090815260026020526040902080546001600160a01b0319169055565b8054610b0390600163ffffffff610d4616565b9055565b80546001019055565b816001600160a01b0316610b23826105d3565b6001600160a01b031614610b6b57604051600160e51b62461bcd0281526004018080602001828103825260258152602001806110156025913960400191505060405180910390fd5b610b7481610ab5565b6001600160a01b0382166000908152600360205260409020610b9590610af0565b60008181526001602052604080822080546001600160a01b0319169055518291906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000610bfe846001600160a01b0316610d8f565b1515610c0c575060016108f4565b6000846001600160a01b031663150b7a02610c2561084f565b8887876040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610caa578181015183820152602001610c92565b50505050905090810190601f168015610cd75780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610cf957600080fd5b505af1158015610d0d573d6000803e3d6000fd5b505050506040513d6020811015610d2357600080fd5b50516001600160e01b031916600160e11b630a85bd010214915050949350505050565b6000610d8883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610dc6565b9392505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081158015906108f45750141592915050565b60008184841115610e5857604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e1d578181015183820152602001610e05565b50505050905090810190601f168015610e4a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732313a206275726e206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a165627a7a72305820fed4dab19a6f867aa363016f85e62b2ff2a5f42547e7845796fc3c65e28dfb7d0029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c806342966c681161007157806342966c68146101bc5780636352211e146101d957806370a08231146101f6578063a22cb4651461022e578063b88d4fde1461025c578063e985e9c514610322576100a9565b806301ffc9a7146100ae578063081812fc146100e9578063095ea7b31461012257806323b872dd1461015057806342842e0e14610186575b600080fd5b6100d5600480360360208110156100c457600080fd5b50356001600160e01b031916610350565b604080519115158252519081900360200190f35b610106600480360360208110156100ff57600080fd5b503561036f565b604080516001600160a01b039092168252519081900360200190f35b61014e6004803603604081101561013857600080fd5b506001600160a01b0381351690602001356103d6565b005b61014e6004803603606081101561016657600080fd5b506001600160a01b03813581169160208101359091169060400135610500565b61014e6004803603606081101561019c57600080fd5b506001600160a01b03813581169160208101359091169060400135610561565b61014e600480360360208110156101d257600080fd5b503561057c565b610106600480360360208110156101ef57600080fd5b50356105d3565b61021c6004803603602081101561020c57600080fd5b50356001600160a01b0316610632565b60408051918252519081900360200190f35b61014e6004803603604081101561024457600080fd5b506001600160a01b038135169060200135151561069f565b61014e6004803603608081101561027257600080fd5b6001600160a01b038235811692602081013590911691604082013591908101906080810160608201356401000000008111156102ad57600080fd5b8201836020820111156102bf57600080fd5b803590602001918460018302840111640100000000831117156102e157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506107a1945050505050565b6100d56004803603604081101561033857600080fd5b506001600160a01b0381358116916020013516610804565b6001600160e01b03191660009081526020819052604090205460ff1690565b600061037a82610832565b15156103ba57604051600160e51b62461bcd02815260040180806020018281038252602c815260200180610f6e602c913960400191505060405180910390fd5b506000908152600260205260409020546001600160a01b031690565b60006103e1826105d3565b90506001600160a01b03838116908216141561043157604051600160e51b62461bcd028152600401808060200182810382526021815260200180610fc36021913960400191505060405180910390fd5b806001600160a01b031661044361084f565b6001600160a01b0316148061046457506104648161045f61084f565b610804565b15156104a457604051600160e51b62461bcd028152600401808060200182810382526038815260200180610ee36038913960400191505060405180910390fd5b60008281526002602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61051161050b61084f565b82610853565b151561055157604051600160e51b62461bcd028152600401808060200182810382526031815260200180610fe46031913960400191505060405180910390fd5b61055c8383836108fc565b505050565b61055c838383604051806020016040528060008152506107a1565b61058761050b61084f565b15156105c757604051600160e51b62461bcd02815260040180806020018281038252603081526020018061103a6030913960400191505060405180910390fd5b6105d081610a48565b50565b6000818152600160205260408120546001600160a01b031680151561062c57604051600160e51b62461bcd028152600401808060200182810382526029815260200180610f456029913960400191505060405180910390fd5b92915050565b60006001600160a01b038216151561067e57604051600160e51b62461bcd02815260040180806020018281038252602a815260200180610f1b602a913960400191505060405180910390fd5b6001600160a01b038216600090815260036020526040902061062c90610a5a565b6106a761084f565b6001600160a01b038381169116141561070a5760408051600160e51b62461bcd02815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b806004600061071761084f565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff19169215159290921790915561075b61084f565b60408051841515815290516001600160a01b0392909216917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b6107b26107ac61084f565b83610853565b15156107f257604051600160e51b62461bcd028152600401808060200182810382526031815260200180610fe46031913960400191505060405180910390fd5b6107fe84848484610a5e565b50505050565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b6000908152600160205260409020546001600160a01b0316151590565b3390565b600061085e82610832565b151561089e57604051600160e51b62461bcd02815260040180806020018281038252602c815260200180610eb7602c913960400191505060405180910390fd5b60006108a9836105d3565b9050806001600160a01b0316846001600160a01b031614806108e45750836001600160a01b03166108d98461036f565b6001600160a01b0316145b806108f457506108f48185610804565b949350505050565b826001600160a01b031661090f826105d3565b6001600160a01b03161461095757604051600160e51b62461bcd028152600401808060200182810382526029815260200180610f9a6029913960400191505060405180910390fd5b6001600160a01b03821615156109a157604051600160e51b62461bcd028152600401808060200182810382526024815260200180610e936024913960400191505060405180910390fd5b6109aa81610ab5565b6001600160a01b03831660009081526003602052604090206109cb90610af0565b6001600160a01b03821660009081526003602052604090206109ec90610b07565b60008181526001602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6105d0610a54826105d3565b82610b10565b5490565b610a698484846108fc565b610a7584848484610bea565b15156107fe57604051600160e51b62461bcd028152600401808060200182810382526032815260200180610e616032913960400191505060405180910390fd5b6000818152600260205260409020546001600160a01b0316156105d057600090815260026020526040902080546001600160a01b0319169055565b8054610b0390600163ffffffff610d4616565b9055565b80546001019055565b816001600160a01b0316610b23826105d3565b6001600160a01b031614610b6b57604051600160e51b62461bcd0281526004018080602001828103825260258152602001806110156025913960400191505060405180910390fd5b610b7481610ab5565b6001600160a01b0382166000908152600360205260409020610b9590610af0565b60008181526001602052604080822080546001600160a01b0319169055518291906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000610bfe846001600160a01b0316610d8f565b1515610c0c575060016108f4565b6000846001600160a01b031663150b7a02610c2561084f565b8887876040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610caa578181015183820152602001610c92565b50505050905090810190601f168015610cd75780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610cf957600080fd5b505af1158015610d0d573d6000803e3d6000fd5b505050506040513d6020811015610d2357600080fd5b50516001600160e01b031916600160e11b630a85bd010214915050949350505050565b6000610d8883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610dc6565b9392505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081158015906108f45750141592915050565b60008184841115610e5857604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e1d578181015183820152602001610e05565b50505050905090810190601f168015610e4a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732313a206275726e206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a165627a7a72305820fed4dab19a6f867aa363016f85e62b2ff2a5f42547e7845796fc3c65e28dfb7d0029",
  "sourceMap": "184:410:10:-;;;718:40:34;385:10;737:20;;718:18;;;:40;;:::i;:::-;2247::9;2121:10;2266:20;;2247:18;;;:40;;:::i;:::-;184:410:10;;1442:190:34;1517:25;;;;;;1509:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1585:33;;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1585:40:34;1621:4;1585:40;;;1442:190::o;184:410:10:-;;;;;;;",
  "deployedSourceMap": "184:410:10:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;184:410:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;915:133:34;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;915:133:34;-1:-1:-1;;;;;;915:133:34;;:::i;:::-;;;;;;;;;;;;;;;;;;4268:200:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4268:200:9;;:::i;:::-;;;;-1:-1:-1;;;;;4268:200:9;;;;;;;;;;;;;;3568:415;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3568:415:9;;;;;;;;:::i;:::-;;5914:287;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5914:287:9;;;;;;;;;;;;;;;;;:::i;6850:132::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;6850:132:9;;;;;;;;;;;;;;;;;:::i;359:233:10:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;359:233:10;;:::i;2924:223:9:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2924:223:9;;:::i;2498:207::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2498:207:9;-1:-1:-1;;;;;2498:207:9;;:::i;:::-;;;;;;;;;;;;;;;;4761:249;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4761:249:9;;;;;;;;;;:::i;7705:269::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;7705:269:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;7705:269:9;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7705:269:9;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7705:269:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;7705:269:9;;-1:-1:-1;7705:269:9;;-1:-1:-1;;;;;7705:269:9:i;5332:145::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5332:145:9;;;;;;;;;;:::i;915:133:34:-;-1:-1:-1;;;;;;1008:33:34;985:4;1008:33;;;;;;;;;;;;;;915:133::o;4268:200:9:-;4327:7;4354:16;4362:7;4354;:16::i;:::-;4346:73;;;;;;-1:-1:-1;;;;;4346:73:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4437:24:9;;;;:15;:24;;;;;;-1:-1:-1;;;;;4437:24:9;;4268:200::o;3568:415::-;3631:13;3647:16;3655:7;3647;:16::i;:::-;3631:32;-1:-1:-1;;;;;;3681:11:9;;;;;;;;3673:57;;;;-1:-1:-1;;;;;3673:57:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3765:5;-1:-1:-1;;;;;3749:21:9;:12;:10;:12::i;:::-;-1:-1:-1;;;;;3749:21:9;;:62;;;;3774:37;3791:5;3798:12;:10;:12::i;:::-;3774:16;:37::i;:::-;3741:152;;;;;;-1:-1:-1;;;;;3741:152:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3904:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;3904:29:9;-1:-1:-1;;;;;3904:29:9;;;;;;;;;3948:28;;3904:24;;3948:28;;;;;;;3568:415;;;:::o;5914:287::-;6056:41;6075:12;:10;:12::i;:::-;6089:7;6056:18;:41::i;:::-;6048:103;;;;;;-1:-1:-1;;;;;6048:103:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6162:32;6176:4;6182:2;6186:7;6162:13;:32::i;:::-;5914:287;;;:::o;6850:132::-;6936:39;6953:4;6959:2;6963:7;6936:39;;;;;;;;;;;;:16;:39::i;359:233:10:-;467:41;486:12;:10;:12::i;467:41::-;459:102;;;;;;-1:-1:-1;;;;;459:102:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;571:14;577:7;571:5;:14::i;:::-;359:233;:::o;2924:223:9:-;2979:7;3014:20;;;:11;:20;;;;;;-1:-1:-1;;;;;3014:20:9;3052:19;;;3044:73;;;;-1:-1:-1;;;;;3044:73:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3135:5;2924:223;-1:-1:-1;;2924:223:9:o;2498:207::-;2553:7;-1:-1:-1;;;;;2580:19:9;;;;2572:74;;;;-1:-1:-1;;;;;2572:74:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2664:24:9;;;;;;:17;:24;;;;;:34;;:32;:34::i;4761:249::-;4846:12;:10;:12::i;:::-;-1:-1:-1;;;;;4840:18:9;;;;;;;4832:56;;;;;-1:-1:-1;;;;;4832:56:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;4938:8;4899:18;:32;4918:12;:10;:12::i;:::-;-1:-1:-1;;;;;4899:32:9;;;;;;;;;;;;;;;;;-1:-1:-1;4899:32:9;;;:36;;;;;;;;;;;;:47;;-1:-1:-1;;4899:47:9;;;;;;;;;;;4976:12;:10;:12::i;:::-;4961:42;;;;;;;;;;-1:-1:-1;;;;;4961:42:9;;;;;;;;;;;;;;4761:249;;:::o;7705:269::-;7819:41;7838:12;:10;:12::i;:::-;7852:7;7819:18;:41::i;:::-;7811:103;;;;;;-1:-1:-1;;;;;7811:103:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7924:43;7942:4;7948:2;7952:7;7961:5;7924:17;:43::i;:::-;7705:269;;;;:::o;5332:145::-;-1:-1:-1;;;;;5435:25:9;;;5412:4;5435:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;5332:145::o;9143:152::-;9200:4;9232:20;;;:11;:20;;;;;;-1:-1:-1;;;;;9232:20:9;9269:19;;;9143:152::o;793:96:24:-;872:10;793:96;:::o;9656:329:9:-;9741:4;9765:16;9773:7;9765;:16::i;:::-;9757:73;;;;;;-1:-1:-1;;;;;9757:73:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9840:13;9856:16;9864:7;9856;:16::i;:::-;9840:32;;9901:5;-1:-1:-1;;;;;9890:16:9;:7;-1:-1:-1;;;;;9890:16:9;;:51;;;;9934:7;-1:-1:-1;;;;;9910:31:9;:20;9922:7;9910:11;:20::i;:::-;-1:-1:-1;;;;;9910:31:9;;9890:51;:87;;;;9945:32;9962:5;9969:7;9945:16;:32::i;:::-;9882:96;9656:329;-1:-1:-1;;;;9656:329:9:o;13266:447::-;13379:4;-1:-1:-1;;;;;13359:24:9;:16;13367:7;13359;:16::i;:::-;-1:-1:-1;;;;;13359:24:9;;13351:78;;;;-1:-1:-1;;;;;13351:78:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;13447:16:9;;;;13439:65;;;;-1:-1:-1;;;;;13439:65:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13515:23;13530:7;13515:14;:23::i;:::-;-1:-1:-1;;;;;13549:23:9;;;;;;:17;:23;;;;;:35;;:33;:35::i;:::-;-1:-1:-1;;;;;13594:21:9;;;;;;:17;:21;;;;;:33;;:31;:33::i;:::-;13638:20;;;;:11;:20;;;;;;:25;;-1:-1:-1;;;;;;13638:25:9;-1:-1:-1;;;;;13638:25:9;;;;;;;;;13679:27;;13638:20;;13679:27;;;;;;;13266:447;;;:::o;12799:90::-;12850:32;12856:16;12864:7;12856;:16::i;:::-;12874:7;12850:5;:32::i;1065:112:33:-;1156:14;;1065:112::o;8679:269:9:-;8788:32;8802:4;8808:2;8812:7;8788:13;:32::i;:::-;8838:48;8861:4;8867:2;8871:7;8880:5;8838:22;:48::i;:::-;8830:111;;;;;;-1:-1:-1;;;;;8830:111:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14813:171;14912:1;14876:24;;;:15;:24;;;;;;-1:-1:-1;;;;;14876:24:9;:38;14872:106;;14965:1;14930:24;;;:15;:24;;;;;:37;;-1:-1:-1;;;;;;14930:37:9;;;14813:171::o;1367:108:33:-;1447:14;;:21;;1466:1;1447:21;:18;:21;:::i;:::-;1430:38;;1367:108::o;1183:178::-;1335:19;;1353:1;1335:19;;;1183:178::o;12294:324:9:-;12388:5;-1:-1:-1;;;;;12368:25:9;:16;12376:7;12368;:16::i;:::-;-1:-1:-1;;;;;12368:25:9;;12360:75;;;;-1:-1:-1;;;;;12360:75:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12446:23;12461:7;12446:14;:23::i;:::-;-1:-1:-1;;;;;12480:24:9;;;;;;:17;:24;;;;;:36;;:34;:36::i;:::-;12557:1;12526:20;;;:11;:20;;;;;;:33;;-1:-1:-1;;;;;;12526:33:9;;;12575:36;12538:7;;12557:1;-1:-1:-1;;;;;12575:36:9;;;;;12557:1;;12575:36;12294:324;;:::o;14302:349::-;14423:4;14448:15;:2;-1:-1:-1;;;;;14448:13:9;;:15::i;:::-;14447:16;14443:58;;;-1:-1:-1;14486:4:9;14479:11;;14443:58;14511:13;14543:2;-1:-1:-1;;;;;14527:36:9;;14564:12;:10;:12::i;:::-;14578:4;14584:7;14593:5;14527:72;;;;;;;;;;;;;-1:-1:-1;;;;;14527:72:9;-1:-1:-1;;;;;14527:72:9;;;;;;-1:-1:-1;;;;;14527:72:9;-1:-1:-1;;;;;14527:72:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;14527:72:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14527:72:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14527:72:9;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14527:72:9;-1:-1:-1;;;;;;14617:26:9;-1:-1:-1;;;;;14617:26:9;;-1:-1:-1;;14302:349:9;;;;;;:::o;1274:134:37:-;1332:7;1358:43;1362:1;1365;1358:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1351:50;1274:134;-1:-1:-1;;;1274:134:37:o;557:797:40:-;617:4;1265:20;;1110:66;1304:15;;;;;:42;;-1:-1:-1;1323:23:40;;;1296:51;-1:-1:-1;;557:797:40:o;1844:187:37:-;1930:7;1965:12;1957:6;;;;1949:29;;;;-1:-1:-1;;;;;1949:29:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1949:29:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2000:5:37;;;1844:187::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"../GSN/Context.sol\";\nimport \"./ERC721.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\ncontract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns a specific ERC721 token.\n     * @param tokenId uint256 id of the ERC721 token to be burned.\n     */\n    function burn(uint256 tokenId) public {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n",
  "sourcePath": "/projects/beefledger/investor-engine/contracts/ERC721/ERC721Burnable.sol",
  "ast": {
    "absolutePath": "/projects/beefledger/investor-engine/contracts/ERC721/ERC721Burnable.sol",
    "exportedSymbols": {
      "ERC721Burnable": [
        2125
      ]
    },
    "id": 2126,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2099,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:10"
      },
      {
        "absolutePath": "/projects/beefledger/investor-engine/contracts/GSN/Context.sol",
        "file": "../GSN/Context.sol",
        "id": 2100,
        "nodeType": "ImportDirective",
        "scope": 2126,
        "sourceUnit": 3047,
        "src": "25:28:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/projects/beefledger/investor-engine/contracts/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 2101,
        "nodeType": "ImportDirective",
        "scope": 2126,
        "sourceUnit": 2098,
        "src": "54:22:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2102,
              "name": "Context",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3046,
              "src": "211:7:10",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Context_$3046",
                "typeString": "contract Context"
              }
            },
            "id": 2103,
            "nodeType": "InheritanceSpecifier",
            "src": "211:7:10"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2104,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2097,
              "src": "220:6:10",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$2097",
                "typeString": "contract ERC721"
              }
            },
            "id": 2105,
            "nodeType": "InheritanceSpecifier",
            "src": "220:6:10"
          }
        ],
        "contractDependencies": [
          2097,
          2941,
          3046,
          3913,
          3923
        ],
        "contractKind": "contract",
        "documentation": "@title ERC721 Burnable Token\n@dev ERC721 Token that can be irreversibly burned (destroyed).",
        "fullyImplemented": true,
        "id": 2125,
        "linearizedBaseContracts": [
          2125,
          2097,
          2941,
          3913,
          3923,
          3046
        ],
        "name": "ERC721Burnable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2123,
              "nodeType": "Block",
              "src": "397:195:10",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 2112,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3034,
                              "src": "486:10:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                                "typeString": "function () view returns (address payable)"
                              }
                            },
                            "id": 2113,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "486:12:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 2114,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2107,
                            "src": "500:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 2111,
                          "name": "_isApprovedOrOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1835,
                          "src": "467:18:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) view returns (bool)"
                          }
                        },
                        "id": 2115,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "467:41:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564",
                        "id": 2116,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "510:50:10",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ee6b7e810d7b317242d4688e6943ff4dd7897bb01d903b1a666812481b12a4f1",
                          "typeString": "literal_string \"ERC721Burnable: caller is not owner nor approved\""
                        },
                        "value": "ERC721Burnable: caller is not owner nor approved"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ee6b7e810d7b317242d4688e6943ff4dd7897bb01d903b1a666812481b12a4f1",
                          "typeString": "literal_string \"ERC721Burnable: caller is not owner nor approved\""
                        }
                      ],
                      "id": 2110,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5437,
                        5438
                      ],
                      "referencedDeclaration": 5438,
                      "src": "459:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2117,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "459:102:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2118,
                  "nodeType": "ExpressionStatement",
                  "src": "459:102:10"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 2120,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2107,
                        "src": "577:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2119,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1964,
                        1977
                      ],
                      "referencedDeclaration": 1977,
                      "src": "571:5:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 2121,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "571:14:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2122,
                  "nodeType": "ExpressionStatement",
                  "src": "571:14:10"
                }
              ]
            },
            "documentation": "@dev Burns a specific ERC721 token.\n@param tokenId uint256 id of the ERC721 token to be burned.",
            "id": 2124,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2108,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2107,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 2124,
                  "src": "373:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2106,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "373:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "372:17:10"
            },
            "returnParameters": {
              "id": 2109,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "397:0:10"
            },
            "scope": 2125,
            "src": "359:233:10",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 2126,
        "src": "184:410:10"
      }
    ],
    "src": "0:595:10"
  },
  "legacyAST": {
    "absolutePath": "/projects/beefledger/investor-engine/contracts/ERC721/ERC721Burnable.sol",
    "exportedSymbols": {
      "ERC721Burnable": [
        2125
      ]
    },
    "id": 2126,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2099,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:10"
      },
      {
        "absolutePath": "/projects/beefledger/investor-engine/contracts/GSN/Context.sol",
        "file": "../GSN/Context.sol",
        "id": 2100,
        "nodeType": "ImportDirective",
        "scope": 2126,
        "sourceUnit": 3047,
        "src": "25:28:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/projects/beefledger/investor-engine/contracts/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 2101,
        "nodeType": "ImportDirective",
        "scope": 2126,
        "sourceUnit": 2098,
        "src": "54:22:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2102,
              "name": "Context",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3046,
              "src": "211:7:10",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Context_$3046",
                "typeString": "contract Context"
              }
            },
            "id": 2103,
            "nodeType": "InheritanceSpecifier",
            "src": "211:7:10"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2104,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2097,
              "src": "220:6:10",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$2097",
                "typeString": "contract ERC721"
              }
            },
            "id": 2105,
            "nodeType": "InheritanceSpecifier",
            "src": "220:6:10"
          }
        ],
        "contractDependencies": [
          2097,
          2941,
          3046,
          3913,
          3923
        ],
        "contractKind": "contract",
        "documentation": "@title ERC721 Burnable Token\n@dev ERC721 Token that can be irreversibly burned (destroyed).",
        "fullyImplemented": true,
        "id": 2125,
        "linearizedBaseContracts": [
          2125,
          2097,
          2941,
          3913,
          3923,
          3046
        ],
        "name": "ERC721Burnable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2123,
              "nodeType": "Block",
              "src": "397:195:10",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 2112,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3034,
                              "src": "486:10:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                                "typeString": "function () view returns (address payable)"
                              }
                            },
                            "id": 2113,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "486:12:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 2114,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2107,
                            "src": "500:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 2111,
                          "name": "_isApprovedOrOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1835,
                          "src": "467:18:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) view returns (bool)"
                          }
                        },
                        "id": 2115,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "467:41:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564",
                        "id": 2116,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "510:50:10",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ee6b7e810d7b317242d4688e6943ff4dd7897bb01d903b1a666812481b12a4f1",
                          "typeString": "literal_string \"ERC721Burnable: caller is not owner nor approved\""
                        },
                        "value": "ERC721Burnable: caller is not owner nor approved"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ee6b7e810d7b317242d4688e6943ff4dd7897bb01d903b1a666812481b12a4f1",
                          "typeString": "literal_string \"ERC721Burnable: caller is not owner nor approved\""
                        }
                      ],
                      "id": 2110,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5437,
                        5438
                      ],
                      "referencedDeclaration": 5438,
                      "src": "459:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2117,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "459:102:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2118,
                  "nodeType": "ExpressionStatement",
                  "src": "459:102:10"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 2120,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2107,
                        "src": "577:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2119,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1964,
                        1977
                      ],
                      "referencedDeclaration": 1977,
                      "src": "571:5:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 2121,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "571:14:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2122,
                  "nodeType": "ExpressionStatement",
                  "src": "571:14:10"
                }
              ]
            },
            "documentation": "@dev Burns a specific ERC721 token.\n@param tokenId uint256 id of the ERC721 token to be burned.",
            "id": 2124,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2108,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2107,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 2124,
                  "src": "373:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2106,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "373:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "372:17:10"
            },
            "returnParameters": {
              "id": 2109,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "397:0:10"
            },
            "scope": 2125,
            "src": "359:233:10",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 2126,
        "src": "184:410:10"
      }
    ],
    "src": "0:595:10"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.5+commit.47a71e8f.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.3",
  "updatedAt": "2020-07-31T06:30:01.976Z",
  "devdoc": {
    "details": "ERC721 Token that can be irreversibly burned (destroyed).",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "burn(uint256)": {
        "details": "Burns a specific ERC721 token.",
        "params": {
          "tokenId": "uint256 id of the ERC721 token to be burned."
        }
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner.",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID.",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the _msgSender() to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requires the msg.sender to be the owner, approved, or operator.",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    },
    "title": "ERC721 Burnable Token"
  },
  "userdoc": {
    "methods": {}
  }
}