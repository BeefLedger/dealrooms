/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MultiSigWalletInterface extends ethers.utils.Interface {
  functions: {
    "owners(uint256)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "confirmations(uint256,address)": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
    "transactionCount()": FunctionFragment;
    "MAX_OWNER_COUNT()": FunctionFragment;
    "required()": FunctionFragment;
    "addOwner(address)": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "replaceOwner(address,address)": FunctionFragment;
    "changeRequirement(uint256)": FunctionFragment;
    "submitTransaction(address,uint256,bytes)": FunctionFragment;
    "confirmTransaction(uint256)": FunctionFragment;
    "revokeConfirmation(uint256)": FunctionFragment;
    "executeTransaction(uint256)": FunctionFragment;
    "isConfirmed(uint256)": FunctionFragment;
    "getConfirmationCount(uint256)": FunctionFragment;
    "getTransactionCount(bool,bool)": FunctionFragment;
    "getOwners()": FunctionFragment;
    "getConfirmations(uint256)": FunctionFragment;
    "getTransactionIds(uint256,uint256,bool,bool)": FunctionFragment;
    "getTransaction(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "confirmations",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_OWNER_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "required", values?: undefined): string;
  encodeFunctionData(functionFragment: "addOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "removeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "replaceOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRequirement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTransaction",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeConfirmation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isConfirmed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfirmationCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionCount",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getConfirmations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionIds",
    values: [BigNumberish, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_OWNER_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "required", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;

  events: {
    "Confirmation(address,uint256)": EventFragment;
    "Revocation(address,uint256)": EventFragment;
    "Submission(uint256)": EventFragment;
    "Execution(uint256)": EventFragment;
    "ExecutionFailure(uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "OwnerAddition(address)": EventFragment;
    "OwnerRemoval(address)": EventFragment;
    "RequirementChange(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Confirmation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Submission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Execution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerRemoval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequirementChange"): EventFragment;
}

export class MultiSigWallet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MultiSigWalletInterface;

  functions: {
    owners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      destination: string;
      value: BigNumber;
      data: string;
      executed: boolean;
      timestamp: BigNumber;
      0: string;
      1: BigNumber;
      2: string;
      3: boolean;
      4: BigNumber;
    }>;

    transactionCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_OWNER_COUNT(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    required(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Allows to add a new owner. Transaction has to be sent by wallet.
     * @param owner Address of new owner to add.
     */
    addOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows to remove an owner. Transaction has to be sent by wallet.
     * @param owner Address of owner to remove.
     */
    removeOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
     * @param newOwner Address of new owner.
     * @param owner Address of owner to be replaced.
     */
    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
     * @param _required Number of required confirmations.
     */
    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows an owner to submit and confirm a transaction.
     * @param data Transaction data payload.
     * @param destination Transaction target address.
     * @param value Transaction ether value.
     * @returns Returns transaction ID.
     */
    submitTransaction(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows an owner to confirm a transaction.
     * @param transactionId Transaction ID.
     */
    confirmTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows an owner to revoke a confirmation for a transaction.
     * @param transactionId Transaction ID.
     */
    revokeConfirmation(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows anyone to execute a confirmed transaction.
     * @param transactionId Transaction ID.
     */
    executeTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Returns the confirmation status of a transaction.
     * @param transactionId Transaction ID.
     * @returns Confirmation status.
     */
    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Returns number of confirmations of a transaction.
     * @param transactionId Transaction ID.
     * @returns Number of confirmations.
     */
    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      0: BigNumber;
    }>;

    /**
     * Returns total number of transactions after filers are applied.
     * @param executed Include executed transactions.
     * @param pending Include pending transactions.
     * @returns Total number of transactions after filters are applied.
     */
    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      0: BigNumber;
    }>;

    /**
     * Returns list of owners.
     * @returns List of owner addresses.
     */
    getOwners(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    /**
     * Returns array with owner addresses, which confirmed transaction.
     * @param transactionId Transaction ID.
     * @returns Returns array of owner addresses.
     */
    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _confirmations: string[];
      0: string[];
    }>;

    /**
     * Returns list of transaction IDs in defined range.
     * @param executed Include executed transactions.
     * @param from Index start position of transaction array.
     * @param pending Include pending transactions.
     * @param to Index end position of transaction array.
     * @returns Returns array of transaction IDs.
     */
    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<{
      _transactionIds: BigNumber[];
      0: BigNumber[];
    }>;

    getTransaction(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: boolean;
      3: BigNumber;
    }>;
  };

  owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  isOwner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  confirmations(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transactions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    destination: string;
    value: BigNumber;
    data: string;
    executed: boolean;
    timestamp: BigNumber;
    0: string;
    1: BigNumber;
    2: string;
    3: boolean;
    4: BigNumber;
  }>;

  transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

  required(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Allows to add a new owner. Transaction has to be sent by wallet.
   * @param owner Address of new owner to add.
   */
  addOwner(owner: string, overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Allows to remove an owner. Transaction has to be sent by wallet.
   * @param owner Address of owner to remove.
   */
  removeOwner(
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
   * @param newOwner Address of new owner.
   * @param owner Address of owner to be replaced.
   */
  replaceOwner(
    owner: string,
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
   * @param _required Number of required confirmations.
   */
  changeRequirement(
    _required: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows an owner to submit and confirm a transaction.
   * @param data Transaction data payload.
   * @param destination Transaction target address.
   * @param value Transaction ether value.
   * @returns Returns transaction ID.
   */
  submitTransaction(
    destination: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows an owner to confirm a transaction.
   * @param transactionId Transaction ID.
   */
  confirmTransaction(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows an owner to revoke a confirmation for a transaction.
   * @param transactionId Transaction ID.
   */
  revokeConfirmation(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows anyone to execute a confirmed transaction.
   * @param transactionId Transaction ID.
   */
  executeTransaction(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Returns the confirmation status of a transaction.
   * @param transactionId Transaction ID.
   * @returns Confirmation status.
   */
  isConfirmed(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Returns number of confirmations of a transaction.
   * @param transactionId Transaction ID.
   * @returns Number of confirmations.
   */
  getConfirmationCount(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns total number of transactions after filers are applied.
   * @param executed Include executed transactions.
   * @param pending Include pending transactions.
   * @returns Total number of transactions after filters are applied.
   */
  getTransactionCount(
    pending: boolean,
    executed: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns list of owners.
   * @returns List of owner addresses.
   */
  getOwners(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Returns array with owner addresses, which confirmed transaction.
   * @param transactionId Transaction ID.
   * @returns Returns array of owner addresses.
   */
  getConfirmations(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Returns list of transaction IDs in defined range.
   * @param executed Include executed transactions.
   * @param from Index start position of transaction array.
   * @param pending Include pending transactions.
   * @param to Index end position of transaction array.
   * @returns Returns array of transaction IDs.
   */
  getTransactionIds(
    from: BigNumberish,
    to: BigNumberish,
    pending: boolean,
    executed: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTransaction(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
    2: boolean;
    3: BigNumber;
  }>;

  callStatic: {
    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    isOwner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      destination: string;
      value: BigNumber;
      data: string;
      executed: boolean;
      timestamp: BigNumber;
      0: string;
      1: BigNumber;
      2: string;
      3: boolean;
      4: BigNumber;
    }>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    required(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows to add a new owner. Transaction has to be sent by wallet.
     * @param owner Address of new owner to add.
     */
    addOwner(owner: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Allows to remove an owner. Transaction has to be sent by wallet.
     * @param owner Address of owner to remove.
     */
    removeOwner(owner: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
     * @param newOwner Address of new owner.
     * @param owner Address of owner to be replaced.
     */
    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
     * @param _required Number of required confirmations.
     */
    changeRequirement(
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows an owner to submit and confirm a transaction.
     * @param data Transaction data payload.
     * @param destination Transaction target address.
     * @param value Transaction ether value.
     * @returns Returns transaction ID.
     */
    submitTransaction(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows an owner to confirm a transaction.
     * @param transactionId Transaction ID.
     */
    confirmTransaction(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows an owner to revoke a confirmation for a transaction.
     * @param transactionId Transaction ID.
     */
    revokeConfirmation(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows anyone to execute a confirmed transaction.
     * @param transactionId Transaction ID.
     */
    executeTransaction(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the confirmation status of a transaction.
     * @param transactionId Transaction ID.
     * @returns Confirmation status.
     */
    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns number of confirmations of a transaction.
     * @param transactionId Transaction ID.
     * @returns Number of confirmations.
     */
    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns total number of transactions after filers are applied.
     * @param executed Include executed transactions.
     * @param pending Include pending transactions.
     * @returns Total number of transactions after filters are applied.
     */
    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns list of owners.
     * @returns List of owner addresses.
     */
    getOwners(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Returns array with owner addresses, which confirmed transaction.
     * @param transactionId Transaction ID.
     * @returns Returns array of owner addresses.
     */
    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Returns list of transaction IDs in defined range.
     * @param executed Include executed transactions.
     * @param from Index start position of transaction array.
     * @param pending Include pending transactions.
     * @param to Index end position of transaction array.
     * @returns Returns array of transaction IDs.
     */
    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTransaction(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: boolean;
      3: BigNumber;
    }>;
  };

  filters: {
    Confirmation(
      sender: string | null,
      transactionId: BigNumberish | null
    ): EventFilter;

    Revocation(
      sender: string | null,
      transactionId: BigNumberish | null
    ): EventFilter;

    Submission(transactionId: BigNumberish | null): EventFilter;

    Execution(transactionId: BigNumberish | null): EventFilter;

    ExecutionFailure(transactionId: BigNumberish | null): EventFilter;

    Deposit(sender: string | null, value: null): EventFilter;

    OwnerAddition(owner: string | null): EventFilter;

    OwnerRemoval(owner: string | null): EventFilter;

    RequirementChange(required: null): EventFilter;
  };

  estimateGas: {
    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    required(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows to add a new owner. Transaction has to be sent by wallet.
     * @param owner Address of new owner to add.
     */
    addOwner(owner: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Allows to remove an owner. Transaction has to be sent by wallet.
     * @param owner Address of owner to remove.
     */
    removeOwner(owner: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
     * @param newOwner Address of new owner.
     * @param owner Address of owner to be replaced.
     */
    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
     * @param _required Number of required confirmations.
     */
    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows an owner to submit and confirm a transaction.
     * @param data Transaction data payload.
     * @param destination Transaction target address.
     * @param value Transaction ether value.
     * @returns Returns transaction ID.
     */
    submitTransaction(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows an owner to confirm a transaction.
     * @param transactionId Transaction ID.
     */
    confirmTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows an owner to revoke a confirmation for a transaction.
     * @param transactionId Transaction ID.
     */
    revokeConfirmation(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows anyone to execute a confirmed transaction.
     * @param transactionId Transaction ID.
     */
    executeTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Returns the confirmation status of a transaction.
     * @param transactionId Transaction ID.
     * @returns Confirmation status.
     */
    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns number of confirmations of a transaction.
     * @param transactionId Transaction ID.
     * @returns Number of confirmations.
     */
    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns total number of transactions after filers are applied.
     * @param executed Include executed transactions.
     * @param pending Include pending transactions.
     * @returns Total number of transactions after filters are applied.
     */
    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns list of owners.
     * @returns List of owner addresses.
     */
    getOwners(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns array with owner addresses, which confirmed transaction.
     * @param transactionId Transaction ID.
     * @returns Returns array of owner addresses.
     */
    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns list of transaction IDs in defined range.
     * @param executed Include executed transactions.
     * @param from Index start position of transaction array.
     * @param pending Include pending transactions.
     * @param to Index end position of transaction array.
     * @returns Returns array of transaction IDs.
     */
    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransaction(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    owners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    required(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows to add a new owner. Transaction has to be sent by wallet.
     * @param owner Address of new owner to add.
     */
    addOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to remove an owner. Transaction has to be sent by wallet.
     * @param owner Address of owner to remove.
     */
    removeOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
     * @param newOwner Address of new owner.
     * @param owner Address of owner to be replaced.
     */
    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
     * @param _required Number of required confirmations.
     */
    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows an owner to submit and confirm a transaction.
     * @param data Transaction data payload.
     * @param destination Transaction target address.
     * @param value Transaction ether value.
     * @returns Returns transaction ID.
     */
    submitTransaction(
      destination: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows an owner to confirm a transaction.
     * @param transactionId Transaction ID.
     */
    confirmTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows an owner to revoke a confirmation for a transaction.
     * @param transactionId Transaction ID.
     */
    revokeConfirmation(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows anyone to execute a confirmed transaction.
     * @param transactionId Transaction ID.
     */
    executeTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the confirmation status of a transaction.
     * @param transactionId Transaction ID.
     * @returns Confirmation status.
     */
    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns number of confirmations of a transaction.
     * @param transactionId Transaction ID.
     * @returns Number of confirmations.
     */
    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns total number of transactions after filers are applied.
     * @param executed Include executed transactions.
     * @param pending Include pending transactions.
     * @returns Total number of transactions after filters are applied.
     */
    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns list of owners.
     * @returns List of owner addresses.
     */
    getOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns array with owner addresses, which confirmed transaction.
     * @param transactionId Transaction ID.
     * @returns Returns array of owner addresses.
     */
    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns list of transaction IDs in defined range.
     * @param executed Include executed transactions.
     * @param from Index start position of transaction array.
     * @param pending Include pending transactions.
     * @param to Index end position of transaction array.
     * @returns Returns array of transaction IDs.
     */
    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransaction(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
