/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface WhitelistedRoleInterface extends ethers.utils.Interface {
  functions: {
    "renounceWhitelistAdmin()": FunctionFragment;
    "addWhitelistAdmin(address)": FunctionFragment;
    "isWhitelistAdmin(address)": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "addWhitelisted(address)": FunctionFragment;
    "removeWhitelisted(address)": FunctionFragment;
    "renounceWhitelisted()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "renounceWhitelistAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelistAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceWhitelisted",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "renounceWhitelistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceWhitelisted",
    data: BytesLike
  ): Result;

  events: {
    "WhitelistedAdded(address)": EventFragment;
    "WhitelistedRemoved(address)": EventFragment;
    "WhitelistAdminAdded(address)": EventFragment;
    "WhitelistAdminRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "WhitelistedAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistedRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistAdminAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistAdminRemoved"): EventFragment;
}

export class WhitelistedRole extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: WhitelistedRoleInterface;

  functions: {
    renounceWhitelistAdmin(overrides?: Overrides): Promise<ContractTransaction>;

    addWhitelistAdmin(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    addWhitelisted(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeWhitelisted(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceWhitelisted(overrides?: Overrides): Promise<ContractTransaction>;
  };

  renounceWhitelistAdmin(overrides?: Overrides): Promise<ContractTransaction>;

  addWhitelistAdmin(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isWhitelistAdmin(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelisted(account: string, overrides?: CallOverrides): Promise<boolean>;

  addWhitelisted(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeWhitelisted(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceWhitelisted(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    renounceWhitelistAdmin(overrides?: CallOverrides): Promise<void>;

    addWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelisted(account: string, overrides?: CallOverrides): Promise<boolean>;

    addWhitelisted(account: string, overrides?: CallOverrides): Promise<void>;

    removeWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceWhitelisted(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    WhitelistedAdded(account: string | null): EventFilter;

    WhitelistedRemoved(account: string | null): EventFilter;

    WhitelistAdminAdded(account: string | null): EventFilter;

    WhitelistAdminRemoved(account: string | null): EventFilter;
  };

  estimateGas: {
    renounceWhitelistAdmin(overrides?: Overrides): Promise<BigNumber>;

    addWhitelistAdmin(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addWhitelisted(account: string, overrides?: Overrides): Promise<BigNumber>;

    removeWhitelisted(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceWhitelisted(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    renounceWhitelistAdmin(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addWhitelistAdmin(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addWhitelisted(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeWhitelisted(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceWhitelisted(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
