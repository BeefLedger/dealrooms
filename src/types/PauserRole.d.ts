/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PauserRoleInterface extends ethers.utils.Interface {
  functions: {
    "isPauser(address)": FunctionFragment;
    "addPauser(address)": FunctionFragment;
    "renouncePauser()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "isPauser", values: [string]): string;
  encodeFunctionData(functionFragment: "addPauser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renouncePauser",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renouncePauser",
    data: BytesLike
  ): Result;

  events: {
    "PauserAdded(address)": EventFragment;
    "PauserRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PauserAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserRemoved"): EventFragment;
}

export class PauserRole extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PauserRoleInterface;

  functions: {
    isPauser(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    addPauser(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renouncePauser(overrides?: Overrides): Promise<ContractTransaction>;
  };

  isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

  addPauser(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renouncePauser(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

    addPauser(account: string, overrides?: CallOverrides): Promise<void>;

    renouncePauser(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    PauserAdded(account: string | null): EventFilter;

    PauserRemoved(account: string | null): EventFilter;
  };

  estimateGas: {
    isPauser(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    addPauser(account: string, overrides?: Overrides): Promise<BigNumber>;

    renouncePauser(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isPauser(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPauser(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renouncePauser(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
