/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SignerRoleInterface extends ethers.utils.Interface {
  functions: {
    "isSigner(address)": FunctionFragment;
    "addSigner(address)": FunctionFragment;
    "renounceSigner()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "isSigner", values: [string]): string;
  encodeFunctionData(functionFragment: "addSigner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceSigner",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "isSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceSigner",
    data: BytesLike
  ): Result;

  events: {
    "SignerAdded(address)": EventFragment;
    "SignerRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SignerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerRemoved"): EventFragment;
}

export class SignerRole extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SignerRoleInterface;

  functions: {
    isSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    addSigner(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceSigner(overrides?: Overrides): Promise<ContractTransaction>;
  };

  isSigner(account: string, overrides?: CallOverrides): Promise<boolean>;

  addSigner(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceSigner(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    isSigner(account: string, overrides?: CallOverrides): Promise<boolean>;

    addSigner(account: string, overrides?: CallOverrides): Promise<void>;

    renounceSigner(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    SignerAdded(account: string | null): EventFilter;

    SignerRemoved(account: string | null): EventFilter;
  };

  estimateGas: {
    isSigner(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    addSigner(account: string, overrides?: Overrides): Promise<BigNumber>;

    renounceSigner(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addSigner(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceSigner(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
