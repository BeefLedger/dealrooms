/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PausableInterface extends ethers.utils.Interface {
  functions: {
    "isPauser(address)": FunctionFragment;
    "renouncePauser()": FunctionFragment;
    "addPauser(address)": FunctionFragment;
    "paused()": FunctionFragment;
    "pause()": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "isPauser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renouncePauser",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addPauser", values: [string]): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renouncePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "PauserAdded(address)": EventFragment;
    "PauserRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserRemoved"): EventFragment;
}

export class Pausable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PausableInterface;

  functions: {
    isPauser(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    renouncePauser(overrides?: Overrides): Promise<ContractTransaction>;

    addPauser(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Called by a pauser to pause, triggers stopped state.
     */
    pause(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Called by a pauser to unpause, returns to normal state.
     */
    unpause(overrides?: Overrides): Promise<ContractTransaction>;
  };

  isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

  renouncePauser(overrides?: Overrides): Promise<ContractTransaction>;

  addPauser(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Called by a pauser to pause, triggers stopped state.
   */
  pause(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Called by a pauser to unpause, returns to normal state.
   */
  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

    renouncePauser(overrides?: CallOverrides): Promise<void>;

    addPauser(account: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Called by a pauser to pause, triggers stopped state.
     */
    pause(overrides?: CallOverrides): Promise<void>;

    /**
     * Called by a pauser to unpause, returns to normal state.
     */
    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Paused(account: null): EventFilter;

    Unpaused(account: null): EventFilter;

    PauserAdded(account: string | null): EventFilter;

    PauserRemoved(account: string | null): EventFilter;
  };

  estimateGas: {
    isPauser(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    renouncePauser(overrides?: Overrides): Promise<BigNumber>;

    addPauser(account: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Called by a pauser to pause, triggers stopped state.
     */
    pause(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Called by a pauser to unpause, returns to normal state.
     */
    unpause(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isPauser(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renouncePauser(overrides?: Overrides): Promise<PopulatedTransaction>;

    addPauser(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Called by a pauser to pause, triggers stopped state.
     */
    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Called by a pauser to unpause, returns to normal state.
     */
    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
