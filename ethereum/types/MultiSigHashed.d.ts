/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MultiSigHashedInterface extends Interface {
  functions: {
    MAX_OWNER_COUNT: TypedFunctionDescription<{ encode([]: []): string }>;

    confirmations: TypedFunctionDescription<{
      encode([,]: [Arrayish, string]): string;
    }>;

    hashes: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    isOwner: TypedFunctionDescription<{ encode([]: [string]): string }>;

    owners: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    required: TypedFunctionDescription<{ encode([]: []): string }>;

    transactionCount: TypedFunctionDescription<{ encode([]: []): string }>;

    transactions: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    ownerHasConfirmed: TypedFunctionDescription<{
      encode([hash, owner]: [Arrayish, string]): string;
    }>;

    addOwner: TypedFunctionDescription<{ encode([owner]: [string]): string }>;

    removeOwner: TypedFunctionDescription<{
      encode([owner]: [string]): string;
    }>;

    replaceOwner: TypedFunctionDescription<{
      encode([owner, newOwner]: [string, string]): string;
    }>;

    changeRequirement: TypedFunctionDescription<{
      encode([_required]: [BigNumberish]): string;
    }>;

    submitTransaction: TypedFunctionDescription<{
      encode([destination, value, data]: [
        string,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    confirmTransaction: TypedFunctionDescription<{
      encode([hash]: [Arrayish]): string;
    }>;

    revokeConfirmation: TypedFunctionDescription<{
      encode([hash]: [Arrayish]): string;
    }>;

    executeTransaction: TypedFunctionDescription<{
      encode([hash]: [Arrayish]): string;
    }>;

    isConfirmed: TypedFunctionDescription<{
      encode([hash]: [Arrayish]): string;
    }>;

    makeHash: TypedFunctionDescription<{
      encode([destination, value, data]: [
        string,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    getConfirmationCount: TypedFunctionDescription<{
      encode([hash]: [Arrayish]): string;
    }>;

    getOwners: TypedFunctionDescription<{ encode([]: []): string }>;

    getConfirmations: TypedFunctionDescription<{
      encode([hash]: [Arrayish]): string;
    }>;

    getTransaction: TypedFunctionDescription<{
      encode([hash]: [Arrayish]): string;
    }>;

    getTransactionByIdx: TypedFunctionDescription<{
      encode([idx]: [BigNumberish]): string;
    }>;
  };

  events: {
    Confirmation: TypedEventDescription<{
      encodeTopics([sender, hash]: [string | null, Arrayish | null]): string[];
    }>;

    Deposit: TypedEventDescription<{
      encodeTopics([sender, value]: [string | null, null]): string[];
    }>;

    Execution: TypedEventDescription<{
      encodeTopics([hash]: [Arrayish | null]): string[];
    }>;

    ExecutionFailure: TypedEventDescription<{
      encodeTopics([hash]: [Arrayish | null]): string[];
    }>;

    OwnerAddition: TypedEventDescription<{
      encodeTopics([owner]: [string | null]): string[];
    }>;

    OwnerRemoval: TypedEventDescription<{
      encodeTopics([owner]: [string | null]): string[];
    }>;

    RequirementChange: TypedEventDescription<{
      encodeTopics([required]: [null]): string[];
    }>;

    Revocation: TypedEventDescription<{
      encodeTopics([sender, hash]: [string | null, Arrayish | null]): string[];
    }>;

    Submission: TypedEventDescription<{
      encodeTopics([hash]: [Arrayish | null]): string[];
    }>;
  };
}

export class MultiSigHashed extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MultiSigHashed;
  attach(addressOrName: string): MultiSigHashed;
  deployed(): Promise<MultiSigHashed>;

  on(event: EventFilter | string, listener: Listener): MultiSigHashed;
  once(event: EventFilter | string, listener: Listener): MultiSigHashed;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MultiSigHashed;
  removeAllListeners(eventName: EventFilter | string): MultiSigHashed;
  removeListener(eventName: any, listener: Listener): MultiSigHashed;

  interface: MultiSigHashedInterface;

  functions: {
    MAX_OWNER_COUNT(overrides?: TransactionOverrides): Promise<BigNumber>;

    "MAX_OWNER_COUNT()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    confirmations(
      arg0: Arrayish,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "confirmations(bytes32,address)"(
      arg0: Arrayish,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    hashes(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "hashes(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    isOwner(arg0: string, overrides?: TransactionOverrides): Promise<boolean>;

    "isOwner(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    owners(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "owners(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    required(overrides?: TransactionOverrides): Promise<BigNumber>;

    "required()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    transactionCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "transactionCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    transactions(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<{
      destination: string;
      value: BigNumber;
      data: string;
      executed: boolean;
      timestamp: BigNumber;
      hash: string;
      0: string;
      1: BigNumber;
      2: string;
      3: boolean;
      4: BigNumber;
      5: string;
    }>;

    "transactions(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<{
      destination: string;
      value: BigNumber;
      data: string;
      executed: boolean;
      timestamp: BigNumber;
      hash: string;
      0: string;
      1: BigNumber;
      2: string;
      3: boolean;
      4: BigNumber;
      5: string;
    }>;

    ownerHasConfirmed(
      hash: Arrayish,
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "ownerHasConfirmed(bytes32,address)"(
      hash: Arrayish,
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Allows to add a new owner. Transaction has to be sent by wallet.
     * @param owner Address of new owner to add.
     */
    addOwner(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows to add a new owner. Transaction has to be sent by wallet.
     * @param owner Address of new owner to add.
     */
    "addOwner(address)"(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows to remove an owner. Transaction has to be sent by wallet.
     * @param owner Address of owner to remove.
     */
    removeOwner(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows to remove an owner. Transaction has to be sent by wallet.
     * @param owner Address of owner to remove.
     */
    "removeOwner(address)"(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
     * @param newOwner Address of new owner.
     * @param owner Address of owner to be replaced.
     */
    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
     * @param newOwner Address of new owner.
     * @param owner Address of owner to be replaced.
     */
    "replaceOwner(address,address)"(
      owner: string,
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
     * @param _required Number of required confirmations.
     */
    changeRequirement(
      _required: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
     * @param _required Number of required confirmations.
     */
    "changeRequirement(uint256)"(
      _required: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows an owner to submit and confirm a transaction.
     * @param data Transaction data payload.
     * @param destination Transaction target address.
     * @param value Transaction ether value.
     */
    submitTransaction(
      destination: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows an owner to submit and confirm a transaction.
     * @param data Transaction data payload.
     * @param destination Transaction target address.
     * @param value Transaction ether value.
     */
    "submitTransaction(address,uint256,bytes)"(
      destination: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows an owner to confirm a transaction.
     * @param hash Transaction ID.
     */
    confirmTransaction(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows an owner to confirm a transaction.
     * @param hash Transaction ID.
     */
    "confirmTransaction(bytes32)"(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows an owner to revoke a confirmation for a transaction.
     * @param hash Transaction ID.
     */
    revokeConfirmation(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows an owner to revoke a confirmation for a transaction.
     * @param hash Transaction ID.
     */
    "revokeConfirmation(bytes32)"(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows anyone to execute a confirmed transaction.
     * @param hash Transaction ID.
     */
    executeTransaction(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows anyone to execute a confirmed transaction.
     * @param hash Transaction ID.
     */
    "executeTransaction(bytes32)"(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Returns the confirmation status of a transaction.
     * @param hash Transaction ID.
     */
    isConfirmed(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Returns the confirmation status of a transaction.
     * @param hash Transaction ID.
     */
    "isConfirmed(bytes32)"(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    makeHash(
      destination: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "makeHash(address,uint256,bytes)"(
      destination: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Returns number of confirmations of a transaction.
     * @param hash Transaction ID.
     */
    getConfirmationCount(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns number of confirmations of a transaction.
     * @param hash Transaction ID.
     */
    "getConfirmationCount(bytes32)"(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns list of owners.
     */
    getOwners(overrides?: TransactionOverrides): Promise<string[]>;

    /**
     * Returns list of owners.
     */
    "getOwners()"(overrides?: TransactionOverrides): Promise<string[]>;

    /**
     * Returns array with owner addresses, which confirmed transaction.
     * @param hash Transaction ID.
     */
    getConfirmations(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string[]>;

    /**
     * Returns array with owner addresses, which confirmed transaction.
     * @param hash Transaction ID.
     */
    "getConfirmations(bytes32)"(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string[]>;

    getTransaction(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: BigNumber;
    }>;

    "getTransaction(bytes32)"(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: BigNumber;
    }>;

    getTransactionByIdx(
      idx: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: BigNumber;
    }>;

    "getTransactionByIdx(uint256)"(
      idx: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: BigNumber;
    }>;
  };

  MAX_OWNER_COUNT(overrides?: TransactionOverrides): Promise<BigNumber>;

  "MAX_OWNER_COUNT()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  confirmations(
    arg0: Arrayish,
    arg1: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "confirmations(bytes32,address)"(
    arg0: Arrayish,
    arg1: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  hashes(arg0: BigNumberish, overrides?: TransactionOverrides): Promise<string>;

  "hashes(uint256)"(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  isOwner(arg0: string, overrides?: TransactionOverrides): Promise<boolean>;

  "isOwner(address)"(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  owners(arg0: BigNumberish, overrides?: TransactionOverrides): Promise<string>;

  "owners(uint256)"(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  required(overrides?: TransactionOverrides): Promise<BigNumber>;

  "required()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  transactionCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  "transactionCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  transactions(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<{
    destination: string;
    value: BigNumber;
    data: string;
    executed: boolean;
    timestamp: BigNumber;
    hash: string;
    0: string;
    1: BigNumber;
    2: string;
    3: boolean;
    4: BigNumber;
    5: string;
  }>;

  "transactions(bytes32)"(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<{
    destination: string;
    value: BigNumber;
    data: string;
    executed: boolean;
    timestamp: BigNumber;
    hash: string;
    0: string;
    1: BigNumber;
    2: string;
    3: boolean;
    4: BigNumber;
    5: string;
  }>;

  ownerHasConfirmed(
    hash: Arrayish,
    owner: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "ownerHasConfirmed(bytes32,address)"(
    hash: Arrayish,
    owner: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Allows to add a new owner. Transaction has to be sent by wallet.
   * @param owner Address of new owner to add.
   */
  addOwner(
    owner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows to add a new owner. Transaction has to be sent by wallet.
   * @param owner Address of new owner to add.
   */
  "addOwner(address)"(
    owner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows to remove an owner. Transaction has to be sent by wallet.
   * @param owner Address of owner to remove.
   */
  removeOwner(
    owner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows to remove an owner. Transaction has to be sent by wallet.
   * @param owner Address of owner to remove.
   */
  "removeOwner(address)"(
    owner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
   * @param newOwner Address of new owner.
   * @param owner Address of owner to be replaced.
   */
  replaceOwner(
    owner: string,
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
   * @param newOwner Address of new owner.
   * @param owner Address of owner to be replaced.
   */
  "replaceOwner(address,address)"(
    owner: string,
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
   * @param _required Number of required confirmations.
   */
  changeRequirement(
    _required: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
   * @param _required Number of required confirmations.
   */
  "changeRequirement(uint256)"(
    _required: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows an owner to submit and confirm a transaction.
   * @param data Transaction data payload.
   * @param destination Transaction target address.
   * @param value Transaction ether value.
   */
  submitTransaction(
    destination: string,
    value: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows an owner to submit and confirm a transaction.
   * @param data Transaction data payload.
   * @param destination Transaction target address.
   * @param value Transaction ether value.
   */
  "submitTransaction(address,uint256,bytes)"(
    destination: string,
    value: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows an owner to confirm a transaction.
   * @param hash Transaction ID.
   */
  confirmTransaction(
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows an owner to confirm a transaction.
   * @param hash Transaction ID.
   */
  "confirmTransaction(bytes32)"(
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows an owner to revoke a confirmation for a transaction.
   * @param hash Transaction ID.
   */
  revokeConfirmation(
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows an owner to revoke a confirmation for a transaction.
   * @param hash Transaction ID.
   */
  "revokeConfirmation(bytes32)"(
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows anyone to execute a confirmed transaction.
   * @param hash Transaction ID.
   */
  executeTransaction(
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows anyone to execute a confirmed transaction.
   * @param hash Transaction ID.
   */
  "executeTransaction(bytes32)"(
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Returns the confirmation status of a transaction.
   * @param hash Transaction ID.
   */
  isConfirmed(
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Returns the confirmation status of a transaction.
   * @param hash Transaction ID.
   */
  "isConfirmed(bytes32)"(
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  makeHash(
    destination: string,
    value: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "makeHash(address,uint256,bytes)"(
    destination: string,
    value: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Returns number of confirmations of a transaction.
   * @param hash Transaction ID.
   */
  getConfirmationCount(
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Returns number of confirmations of a transaction.
   * @param hash Transaction ID.
   */
  "getConfirmationCount(bytes32)"(
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Returns list of owners.
   */
  getOwners(overrides?: TransactionOverrides): Promise<string[]>;

  /**
   * Returns list of owners.
   */
  "getOwners()"(overrides?: TransactionOverrides): Promise<string[]>;

  /**
   * Returns array with owner addresses, which confirmed transaction.
   * @param hash Transaction ID.
   */
  getConfirmations(
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string[]>;

  /**
   * Returns array with owner addresses, which confirmed transaction.
   * @param hash Transaction ID.
   */
  "getConfirmations(bytes32)"(
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string[]>;

  getTransaction(
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<{
    0: string;
    1: string;
    2: string;
    3: boolean;
    4: BigNumber;
  }>;

  "getTransaction(bytes32)"(
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<{
    0: string;
    1: string;
    2: string;
    3: boolean;
    4: BigNumber;
  }>;

  getTransactionByIdx(
    idx: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    0: string;
    1: string;
    2: string;
    3: boolean;
    4: BigNumber;
  }>;

  "getTransactionByIdx(uint256)"(
    idx: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    0: string;
    1: string;
    2: string;
    3: boolean;
    4: BigNumber;
  }>;

  filters: {
    Confirmation(sender: string | null, hash: Arrayish | null): EventFilter;

    Deposit(sender: string | null, value: null): EventFilter;

    Execution(hash: Arrayish | null): EventFilter;

    ExecutionFailure(hash: Arrayish | null): EventFilter;

    OwnerAddition(owner: string | null): EventFilter;

    OwnerRemoval(owner: string | null): EventFilter;

    RequirementChange(required: null): EventFilter;

    Revocation(sender: string | null, hash: Arrayish | null): EventFilter;

    Submission(hash: Arrayish | null): EventFilter;
  };

  estimate: {
    MAX_OWNER_COUNT(overrides?: TransactionOverrides): Promise<BigNumber>;

    "MAX_OWNER_COUNT()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    confirmations(
      arg0: Arrayish,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "confirmations(bytes32,address)"(
      arg0: Arrayish,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    hashes(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "hashes(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isOwner(arg0: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "isOwner(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    owners(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "owners(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    required(overrides?: TransactionOverrides): Promise<BigNumber>;

    "required()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    transactionCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "transactionCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    transactions(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transactions(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    ownerHasConfirmed(
      hash: Arrayish,
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "ownerHasConfirmed(bytes32,address)"(
      hash: Arrayish,
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to add a new owner. Transaction has to be sent by wallet.
     * @param owner Address of new owner to add.
     */
    addOwner(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to add a new owner. Transaction has to be sent by wallet.
     * @param owner Address of new owner to add.
     */
    "addOwner(address)"(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to remove an owner. Transaction has to be sent by wallet.
     * @param owner Address of owner to remove.
     */
    removeOwner(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to remove an owner. Transaction has to be sent by wallet.
     * @param owner Address of owner to remove.
     */
    "removeOwner(address)"(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
     * @param newOwner Address of new owner.
     * @param owner Address of owner to be replaced.
     */
    replaceOwner(
      owner: string,
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to replace an owner with a new owner. Transaction has to be sent by wallet.
     * @param newOwner Address of new owner.
     * @param owner Address of owner to be replaced.
     */
    "replaceOwner(address,address)"(
      owner: string,
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
     * @param _required Number of required confirmations.
     */
    changeRequirement(
      _required: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to change the number of required confirmations. Transaction has to be sent by wallet.
     * @param _required Number of required confirmations.
     */
    "changeRequirement(uint256)"(
      _required: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allows an owner to submit and confirm a transaction.
     * @param data Transaction data payload.
     * @param destination Transaction target address.
     * @param value Transaction ether value.
     */
    submitTransaction(
      destination: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allows an owner to submit and confirm a transaction.
     * @param data Transaction data payload.
     * @param destination Transaction target address.
     * @param value Transaction ether value.
     */
    "submitTransaction(address,uint256,bytes)"(
      destination: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allows an owner to confirm a transaction.
     * @param hash Transaction ID.
     */
    confirmTransaction(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allows an owner to confirm a transaction.
     * @param hash Transaction ID.
     */
    "confirmTransaction(bytes32)"(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allows an owner to revoke a confirmation for a transaction.
     * @param hash Transaction ID.
     */
    revokeConfirmation(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allows an owner to revoke a confirmation for a transaction.
     * @param hash Transaction ID.
     */
    "revokeConfirmation(bytes32)"(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allows anyone to execute a confirmed transaction.
     * @param hash Transaction ID.
     */
    executeTransaction(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Allows anyone to execute a confirmed transaction.
     * @param hash Transaction ID.
     */
    "executeTransaction(bytes32)"(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the confirmation status of a transaction.
     * @param hash Transaction ID.
     */
    isConfirmed(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the confirmation status of a transaction.
     * @param hash Transaction ID.
     */
    "isConfirmed(bytes32)"(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    makeHash(
      destination: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "makeHash(address,uint256,bytes)"(
      destination: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns number of confirmations of a transaction.
     * @param hash Transaction ID.
     */
    getConfirmationCount(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns number of confirmations of a transaction.
     * @param hash Transaction ID.
     */
    "getConfirmationCount(bytes32)"(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns list of owners.
     */
    getOwners(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Returns list of owners.
     */
    "getOwners()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Returns array with owner addresses, which confirmed transaction.
     * @param hash Transaction ID.
     */
    getConfirmations(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns array with owner addresses, which confirmed transaction.
     * @param hash Transaction ID.
     */
    "getConfirmations(bytes32)"(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getTransaction(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTransaction(bytes32)"(
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getTransactionByIdx(
      idx: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTransactionByIdx(uint256)"(
      idx: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
