/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface DealRoomHubInterface extends Interface {
  functions: {
    makeRoom: TypedFunctionDescription<{
      encode([params]: [
        {
          buyer: string;
          seller: string;
          arbitrator: string;
          sensorApprover: string;
          docApprover: string;
        }
      ]): string;
    }>;

    getUserRooms: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    getAllRooms: TypedFunctionDescription<{ encode([]: []): string }>;

    getRoom: TypedFunctionDescription<{ encode([addr]: [string]): string }>;

    roomCount: TypedFunctionDescription<{ encode([]: []): string }>;

    changeOwner: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;
  };

  events: {
    NewRoomEvent: TypedEventDescription<{
      encodeTopics([addr]: [null]): string[];
    }>;
  };
}

export class DealRoomHub extends Contract {
  connect(signerOrProvider: Signer | Provider | string): DealRoomHub;
  attach(addressOrName: string): DealRoomHub;
  deployed(): Promise<DealRoomHub>;

  on(event: EventFilter | string, listener: Listener): DealRoomHub;
  once(event: EventFilter | string, listener: Listener): DealRoomHub;
  addListener(eventName: EventFilter | string, listener: Listener): DealRoomHub;
  removeAllListeners(eventName: EventFilter | string): DealRoomHub;
  removeListener(eventName: any, listener: Listener): DealRoomHub;

  interface: DealRoomHubInterface;

  functions: {
    makeRoom(
      params: {
        buyer: string;
        seller: string;
        arbitrator: string;
        sensorApprover: string;
        docApprover: string;
      },
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "makeRoom(tuple)"(
      params: {
        buyer: string;
        seller: string;
        arbitrator: string;
        sensorApprover: string;
        docApprover: string;
      },
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getUserRooms(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<string[]>;

    "getUserRooms(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<string[]>;

    getAllRooms(overrides?: TransactionOverrides): Promise<string[]>;

    "getAllRooms()"(overrides?: TransactionOverrides): Promise<string[]>;

    getRoom(
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<{
      addr: string;
      buyer: string;
      seller: string;
      arbitrator: string;
      sensorApprover: string;
      docApprover: string;
      dealMultiSig: string;
      agentMultiSig: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
    }>;

    "getRoom(address)"(
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<{
      addr: string;
      buyer: string;
      seller: string;
      arbitrator: string;
      sensorApprover: string;
      docApprover: string;
      dealMultiSig: string;
      agentMultiSig: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
    }>;

    roomCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "roomCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    changeOwner(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "changeOwner(address)"(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  makeRoom(
    params: {
      buyer: string;
      seller: string;
      arbitrator: string;
      sensorApprover: string;
      docApprover: string;
    },
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "makeRoom(tuple)"(
    params: {
      buyer: string;
      seller: string;
      arbitrator: string;
      sensorApprover: string;
      docApprover: string;
    },
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getUserRooms(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<string[]>;

  "getUserRooms(address)"(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<string[]>;

  getAllRooms(overrides?: TransactionOverrides): Promise<string[]>;

  "getAllRooms()"(overrides?: TransactionOverrides): Promise<string[]>;

  getRoom(
    addr: string,
    overrides?: TransactionOverrides
  ): Promise<{
    addr: string;
    buyer: string;
    seller: string;
    arbitrator: string;
    sensorApprover: string;
    docApprover: string;
    dealMultiSig: string;
    agentMultiSig: string;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: string;
    7: string;
  }>;

  "getRoom(address)"(
    addr: string,
    overrides?: TransactionOverrides
  ): Promise<{
    addr: string;
    buyer: string;
    seller: string;
    arbitrator: string;
    sensorApprover: string;
    docApprover: string;
    dealMultiSig: string;
    agentMultiSig: string;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: string;
    7: string;
  }>;

  roomCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  "roomCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  changeOwner(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "changeOwner(address)"(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    NewRoomEvent(addr: null): EventFilter;
  };

  estimate: {
    makeRoom(
      params: {
        buyer: string;
        seller: string;
        arbitrator: string;
        sensorApprover: string;
        docApprover: string;
      },
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "makeRoom(tuple)"(
      params: {
        buyer: string;
        seller: string;
        arbitrator: string;
        sensorApprover: string;
        docApprover: string;
      },
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getUserRooms(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getUserRooms(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getAllRooms(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getAllRooms()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getRoom(addr: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "getRoom(address)"(
      addr: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    roomCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "roomCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    changeOwner(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "changeOwner(address)"(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
